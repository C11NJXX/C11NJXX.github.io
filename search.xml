<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树的数据结构与算法</title>
      <link href="/2023/06/30/LearnAlgorithm1/"/>
      <url>/2023/06/30/LearnAlgorithm1/</url>
      
        <content type="html"><![CDATA[<p>记录一下学习算法和数据结构的过程（树）</p><p>本博客参考<strong><a href="https://www.hello-algo.com/chapter_tree/">《Hello算法》</a></strong></p><span id="more"></span><h1 id="二叉树🌳"><a href="#二叉树🌳" class="headerlink" title="二叉树🌳"></a>二叉树🌳</h1><h2 id="1-概念学习"><a href="#1-概念学习" class="headerlink" title="1.概念学习"></a>1.概念学习</h2><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230630111354.png" alt=""></p><h3 id="1-1-从两种角度去理解二叉树的高度，节点的深度和高度"><a href="#1-1-从两种角度去理解二叉树的高度，节点的深度和高度" class="headerlink" title="1.1 从两种角度去理解二叉树的高度，节点的深度和高度"></a>1.1 从两种角度去理解二叉树的高度，节点的深度和高度</h3><p>从上图来看，这像一颗倒着长的树，那么理解<strong>二叉树的高度</strong>时，就要在脑海里<strong>把这棵树立过来</strong>（从根节点到最远节点）就是树的高度；</p><p>再理解<strong>节点的深度和高度</strong>，就要把这棵树想象成<strong>埋在地里的根</strong>，在比较深度的时候要和地面上的根节点比，在比较高度的时候，要和最深的根去比</p><h2 id="2-二叉树的插入和删除操作"><a href="#2-二叉树的插入和删除操作" class="headerlink" title="2 二叉树的插入和删除操作"></a>2 二叉树的插入和删除操作</h2><h3 id="2-1-插入操作"><a href="#2-1-插入操作" class="headerlink" title="2.1 插入操作"></a>2.1 插入操作</h3><p><strong>TreeNode类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.source.tree.Tree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建节点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> TreeNode left;</span><br><span class="line">    <span class="keyword">private</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="number">0</span>;</span><br><span class="line">        left = <span class="literal">null</span>;</span><br><span class="line">        right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        left = <span class="literal">null</span>;</span><br><span class="line">        right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(TreeNode left)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(TreeNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showInfo1</span><span class="params">(TreeNode treeNode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode.left != <span class="literal">null</span> &amp;&amp; treeNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(treeNode.value + <span class="string">&quot;节点的左节点为：&quot;</span> + treeNode.left.value + <span class="string">&quot; 该节点的右节点为：&quot;</span> + treeNode.right.value);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (treeNode.left != <span class="literal">null</span> &amp;&amp; treeNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(treeNode.value + <span class="string">&quot;节点的左节点为：&quot;</span> + treeNode.left.value + <span class="string">&quot; 该节点的右节点为空 &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (treeNode.left == <span class="literal">null</span> &amp;&amp; treeNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(treeNode.value + <span class="string">&quot;节点的左节点为空&quot;</span> + <span class="string">&quot; 该节点的右节点为:&quot;</span> + treeNode.right.value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(treeNode.value + <span class="string">&quot;节点为叶节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showInfo2</span><span class="params">(TreeNode treeNode)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(treeNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根节点不为空，先打印根节点情况,判断左右节点，按照先左后右顺序打印</span></span><br><span class="line">            TreeNode.showInfo1(treeNode);</span><br><span class="line">           <span class="comment">//利用循环，当碰到叶节点时，停止该分支</span></span><br><span class="line">           <span class="keyword">if</span>(treeNode.left != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//左节点不为空，作为新的根节点</span></span><br><span class="line">               <span class="type">Thread</span> <span class="variable">leftThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                           <span class="meta">@Override</span></span><br><span class="line">                           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                               TreeNode.showInfo2(treeNode.left);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">               );</span><br><span class="line">               leftThread.start();</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span>(treeNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//左节点不为空，作为新的根节点</span></span><br><span class="line">                <span class="type">Thread</span> <span class="variable">rightThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                                TreeNode.showInfo2(treeNode.right);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                );</span><br><span class="line">                rightThread.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLeaf</span><span class="params">(TreeNode treeNode)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(treeNode.left == <span class="literal">null</span> &amp;&amp; treeNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> (TreeNode) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value &gt; treeNode.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.value &lt; treeNode.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我用了两个showInfo，第一个比较单纯，没有考虑到如何正确遍历树，后面一个我用了多线程和一个循环结构，配合第一个方法可以打印出正确的树的结构，不过后期应该有更好的遍历方法，这里只是我自己的写法</p><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//建立联系</span></span><br><span class="line">        treeNode1.setLeft(treeNode2);</span><br><span class="line">        treeNode1.setRight(treeNode3);</span><br><span class="line">        treeNode2.setLeft(treeNode4);</span><br><span class="line">        treeNode3.setRight(treeNode5);</span><br><span class="line">        <span class="comment">//创建集合存储节点</span></span><br><span class="line">        ArrayList&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(treeNode1);</span><br><span class="line">        list.add(treeNode2);</span><br><span class="line">        list.add(treeNode3);</span><br><span class="line">        list.add(treeNode4);</span><br><span class="line">        list.add(treeNode5);</span><br><span class="line"><span class="comment">//        for (TreeNode treeNode : list) &#123;</span></span><br><span class="line"><span class="comment">//            TreeNode.showInfo1(treeNode);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//TreeNode.showInfo2(treeNode1);</span></span><br><span class="line"></span><br><span class="line">        exert(treeNode1, treeNode2, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exert</span><span class="params">(TreeNode treeNode1, TreeNode treeNode2, ArrayList&lt;TreeNode&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//测试插入节点</span></span><br><span class="line">        <span class="comment">//二节点的左节点插入6节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>);</span><br><span class="line">        list.add(treeNode6);</span><br><span class="line">        treeNode1.setLeft(treeNode6);</span><br><span class="line">        treeNode6.setLeft(treeNode2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;插入6节点后&quot;</span> + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">        TreeNode.showInfo2(treeNode1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-打印结果"><a href="#2-2-打印结果" class="headerlink" title="2.2 打印结果"></a>2.2 打印结果</h3><h4 id="2-2-1"><a href="#2-2-1" class="headerlink" title="2.2.1"></a>2.2.1</h4><p>1节点的左节点为：2 该节点的右节点为：3<br>2节点的左节点为：4 该节点的右节点为空<br>3节点的左节点为空 该节点的右节点为:5<br>4节点为叶节点<br>5节点为叶节点</p><hr><h4 id="2-2-2-插入6节点后"><a href="#2-2-2-插入6节点后" class="headerlink" title="2.2.2 插入6节点后"></a>2.2.2 插入6节点后</h4><p>1节点的左节点为：6 该节点的右节点为：3<br>3节点的左节点为空 该节点的右节点为:5<br>6节点的左节点为：2 该节点的右节点为空<br>2节点的左节点为：4 该节点的右节点为空<br>4节点为叶节点<br>5节点为叶节点</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/%EF%BC%88%E6%A0%91%EF%BC%89%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9.jpg" alt=""></p><h3 id="2-3-删除节点"><a href="#2-3-删除节点" class="headerlink" title="2.3 删除节点"></a>2.3 删除节点</h3><p>这个比较简单，只需要直接把2节点作为1节点的左节点，6就相当于被删除了～</p><h2 id="3-二叉树的遍历（广度遍历与深度遍历）"><a href="#3-二叉树的遍历（广度遍历与深度遍历）" class="headerlink" title="3. 二叉树的遍历（广度遍历与深度遍历）"></a>3. 二叉树的遍历（<strong>广度遍历与深度遍历</strong>）</h2><h3 id="层序遍历法（广度遍历优先）"><a href="#层序遍历法（广度遍历优先）" class="headerlink" title="层序遍历法（广度遍历优先）"></a>层序遍历法（广度遍历优先）</h3><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230716161656.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo2;</span><br><span class="line"><span class="keyword">import</span> main.java.learn.theme.treedemo.demo1.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//建立联系</span></span><br><span class="line">        treeNode1.setLeft(treeNode2);</span><br><span class="line">        treeNode1.setRight(treeNode3);</span><br><span class="line">        treeNode2.setLeft(treeNode4);</span><br><span class="line">        treeNode3.setRight(treeNode5);</span><br><span class="line">        <span class="comment">//------//</span></span><br><span class="line">        List&lt;Integer&gt; result = method1(treeNode1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : result) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">method1</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//层序遍历法，遍历的同时获取节点值</span></span><br><span class="line">        <span class="comment">//用queue存储每个节点(FIFO)</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="comment">//创建一个List存储每个节点值</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//循环判断是否为空</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//非空，队首出列（第一次就是根节点）</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            list.add(node.getValue());</span><br><span class="line">            <span class="comment">//分别判断左右节点(利用queue FIFO的特性，保证遍历顺序)</span></span><br><span class="line">            <span class="keyword">if</span>(node.getLeft() != <span class="literal">null</span> ) &#123;</span><br><span class="line">                queue.add(node.getLeft());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.getRight() != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(node.getRight());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在每一次遍历的时候都会记录当前传入节点的值，并且如果有左右节点，都会按照顺序入队，循环结束证明所有的节点都已经遍历完毕了</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>打印结果</strong></p><p>1<br>2<br>3<br>4<br>5</p><hr><h3 id="前序，后序，中序遍历法-深度遍历优先"><a href="#前序，后序，中序遍历法-深度遍历优先" class="headerlink" title="前序，后序，中序遍历法(深度遍历优先)"></a>前序，后序，中序遍历法(深度遍历优先)</h3><p><strong>先来看看我和gpt的一些问答</strong></p><p><strong>Q1:</strong>前序，中序，后序遍历是什么，为我详细解答一下</p><p><strong>A1:</strong> 前序遍历、中序遍历和后序遍历是二叉树遍历的三种常见方式，用于按照特定顺序访问二叉树中的节点。</p><ol><li><p>前序遍历（Preorder Traversal）：<br>前序遍历先访问根节点，然后按照先左后右的顺序递归地遍历左子树和右子树。即根节点 -&gt; 左子树 -&gt; 右子树。</p></li><li><p>中序遍历（Inorder Traversal）：<br>中序遍历先递归地遍历左子树，然后访问根节点，最后递归地遍历右子树。即左子树 -&gt; 根节点 -&gt; 右子树。</p></li><li><p>后序遍历（Postorder Traversal）：<br>后序遍历先递归地遍历左子树，然后递归地遍历右子树，最后访问根节点。即左子树 -&gt; 右子树 -&gt; 根节点。</p></li></ol><p>这三种遍历方式都是通过递归或栈的辅助实现的。它们可以用来处理二叉树的节点，进行节点值的访问、打印、复制等操作。</p><p>需要注意的是，每种遍历方式在访问节点的顺序和操作时机上有所区别，因此选择适当的遍历方式取决于具体的需求和问题。例如，前序遍历适用于创建二叉树的复制、打印树的结构等；中序遍历适用于搜索树中的节点或按节点值的大小进行排序；后序遍历适用于释放二叉树的内存等操作。</p><p>对于一个给定的二叉树，可以根据需求选择合适的遍历方式来处理树的节点。</p><hr><p><strong>Q2:</strong> 这些顺序的命名由遍历根的顺序决定吗？ </p><p><strong>A2:</strong> 是的，这些遍历方式的命名是根据<strong>根节点的访问顺序</strong>来命名的。</p><ul><li>前序遍历：”前”指的是根节点的访问顺序位于左子树和右子树之前。</li><li>中序遍历：”中”指的是根节点的访问顺序位于左子树和右子树之间。</li><li>后序遍历：”后”指的是根节点的访问顺序位于左子树和右子树之后。</li></ul><p>这样的命名方式有助于描述节点的访问顺序，并且在讨论二叉树遍历时能够更清晰地表达所采用的遍历策略。</p><hr><p><strong>Q3:</strong>不太理解这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 前序遍历 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树</span></span><br><span class="line">    list.add(root.val);</span><br><span class="line">    preOrder(root.left);</span><br><span class="line">    preOrder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A3:</strong>  这段代码实现了二叉树的前序遍历算法。让我逐步解释它的工作原理：</p><ol><li>首先，我们判断根节点是否为空，如果为空，则直接返回。</li><li>如果根节点不为空，我们首先访问当前节点（即将当前节点的值添加到列表中）。</li><li>然后，递归地对左子树进行前序遍历，即调用 <code>preOrder(root.left)</code>。</li><li>接着，递归地对右子树进行前序遍历，即调用 <code>preOrder(root.right)</code>。</li></ol><p>这个过程可以形象地描述为”根节点 -&gt; 左子树 -&gt; 右子树”的访问顺序。每个节点的访问顺序是先访问根节点，然后递归地按照前序遍历顺序访问左子树和右子树。</p><p>通过递归调用，我们可以遍历整棵二叉树，并将节点的值按前序遍历的顺序添加到列表中。</p><hr><p><strong>Q4:</strong>  这里的递归，相当于把左右节点当成一个新的根，左右子树看成新的树，再先遍历根，直到最后传入的左右节点为空为止是吗</p><p><strong>A4:</strong> 正解！在前序遍历算法中，我们首先访问当前节点，然后递归地对左子树和右子树进行前序遍历。每次递归调用时，左子节点和右子节点都被视为新的根节点，然后继续按照前序遍历的方式遍历它们的左右子树。这个过程会一直进行下去，直到遇到空节点为止，然后回溯到上一层继续遍历其他子树。</p><p>可以将递归过程看作是对每个子树的遍历，每个子树的根节点会作为新的起点进行遍历。递归调用的结束条件是遇到空节点，表示已经遍历完该子树。</p><p>通过不断地将左右子节点作为新的根节点进行遍历，我们可以遍历整棵二叉树的所有节点，并按照前序遍历的顺序访问它们。</p><hr><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> main.java.learn.theme.treedemo.demo1.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">7</span>);</span><br><span class="line">        treeNode1.setLeft(treeNode2);</span><br><span class="line">        treeNode1.setRight(treeNode3);</span><br><span class="line">        treeNode2.setLeft(treeNode4);</span><br><span class="line">        treeNode2.setRight(treeNode5);</span><br><span class="line">        treeNode3.setLeft(treeNode6);</span><br><span class="line">        treeNode3.setRight(treeNode7);</span><br><span class="line">        <span class="comment">//前序遍历法</span></span><br><span class="line">        method1(treeNode1);</span><br><span class="line">        System.out.println(<span class="string">&quot;前序遍历法&quot;</span>);</span><br><span class="line">        printList(list1);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">//中序遍历法</span></span><br><span class="line">        method2(treeNode1);</span><br><span class="line">        System.out.println(<span class="string">&quot;中序遍历法&quot;</span>);</span><br><span class="line">        printList(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">//中序遍历法</span></span><br><span class="line">        method3(treeNode1);</span><br><span class="line">        System.out.println(<span class="string">&quot;后序遍历法&quot;</span>);</span><br><span class="line">        printList(list3);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list1.add(root.getValue());</span><br><span class="line">            method1(root.getLeft());</span><br><span class="line">            method1(root.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method2(root.getLeft());</span><br><span class="line">            list2.add(root.getValue());</span><br><span class="line">            method2(root.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method3(root.getLeft());</span><br><span class="line">            method3(root.getRight());</span><br><span class="line">            list3.add(root.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果打印：</p><p>前序遍历法<br>1-&gt;2-&gt;4-&gt;5-&gt;3-&gt;6-&gt;7-&gt;End</p><p>中序遍历法<br>4-&gt;2-&gt;5-&gt;1-&gt;6-&gt;3-&gt;7-&gt;End</p><p>后序遍历法<br>4-&gt;5-&gt;2-&gt;6-&gt;7-&gt;3-&gt;1-&gt;End</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂谈</title>
      <link href="/2023/06/21/life1/"/>
      <url>/2023/06/21/life1/</url>
      
        <content type="html"><![CDATA[<p>记录一下最近生活吧</p><span id="more"></span><h1 id="近日总结"><a href="#近日总结" class="headerlink" title="近日总结"></a>近日总结</h1><h2 id="1-学习上"><a href="#1-学习上" class="headerlink" title="1.学习上"></a>1.学习上</h2><p>鸽了三四天没有再搞博客上的文章和装饰，直到今天下午才闲的一些功夫来写下博客，这两日是学校的期末周时间，我已经考完了高等数学和线性代数，还有大学物理，大学英语，Java 和离散数学没有考，只能说还是挺忙碌的，大学物理还在雾里（😭），但是我相信老师（👨‍🏫）的重点是真的考点，那我在端午就放心的去做那些题目了（虽然还是很多😮‍💨）</p><p>晒一张图书馆往外看的漫画云～☁️</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/IMG_6490.jpg" alt=""></p><h2 id="2-生活上"><a href="#2-生活上" class="headerlink" title="2.生活上"></a>2.生活上</h2><p>这两日下午一般都学的很晚，正是夕阳美景的时光🌇</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/IMG_6443.jpg" alt=""></p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/IMG_6491.jpg" alt=""></p><p>篝火民谣之夜依旧是氛围感十足😄</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/IMG_6465.jpg" alt=""></p><h2 id="浅浅的总结一下"><a href="#浅浅的总结一下" class="headerlink" title="浅浅的总结一下"></a>浅浅的总结一下</h2><p>这两日其实想说的没有很多，生活都是去体会的，哈哈，其实是我懒，我会更多的分享学习上的博客，但是生活是我们必不可少的永恒</p><p>bye～👋</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭个站的小心得</title>
      <link href="/2023/06/18/%E6%90%AD%E4%B8%AA%E7%AB%99%E7%9A%84%E5%B0%8F%E5%BF%83%E5%BE%97/"/>
      <url>/2023/06/18/%E6%90%AD%E4%B8%AA%E7%AB%99%E7%9A%84%E5%B0%8F%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>记录一下还没有完全建好但是大致能用的网站的建立心得体会</p><span id="more"></span><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li><a href="#1-为啥要建站">为啥要建站</a></li><li><a href="#2-建站的过程">建站的过程</a></li><li><a href="#3-遇到哪些问题">遇到哪些问题</a></li><li><a href="#4-写在最后">写在最后</a></li></ol><h2 id="1-为啥要建站？"><a href="#1-为啥要建站？" class="headerlink" title="1.为啥要建站？"></a>1.为啥要建站？</h2><ol><li>平时我自己有写一些记录的习惯，无论是生活还是学习，我觉得记录总是有意义的</li><li>在建站之前我本来是这样想的：自己学习 HTML，CSS，JavaScript，还有一些相关知识，<br>然后搭出一个属于自己的网站，并且把这个作为一个长期的目标，但是偶然间发现了这种现成的<br> 框架，发现是真的不错，就连着花了两天的时间搭出了一个雏形来</li><li>一个学习编程的人怎么能没有博客呢哈哈哈</li></ol><h2 id="2-建站的过程"><a href="#2-建站的过程" class="headerlink" title="2. 建站的过程"></a>2. 建站的过程</h2><ol><li><p>当时是先面向 CSDN 建站，大佬的教程很不错，跟着把一些环境都配置好了，但是没有用大佬的推荐的<br>butterfly 主题，用了volantis，也很不错！在这里鸣谢一下～.</p><p> —&gt;<a href="https://coder-jason.cn/2022/01/19/setup-personal-blog/">建站博客</a>.</p><p> —&gt;<a href="https://volantis.js.org">volantis</a></p></li><li>这两天其实一直沉迷于一些魔改，想把自己的网站做的很花，收藏了很多很多人的博客教程，以及一些 github 项目<br> 这里贴个图，就不一一感谢了，后面还会继续学习大佬们的博客文章！  <img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230614230952.png" alt=""><ol><li><strong>这里重点感谢一位大佬的博客，帮助我在原博客本地文件损坏的情况下用 butterfly 主题重建了博客，并且非常好看！！！</strong><br>这里贴大佬的网站 —&gt;<a href="https://www.fomal.cn">fomal</a><br><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230616115401.png" alt=""><h2 id="3-遇到哪些问题"><a href="#3-遇到哪些问题" class="headerlink" title="3. 遇到哪些问题"></a>3. 遇到哪些问题</h2></li></ol></li><li>一个就是我没学过 HTML，CSS，js 的一些知识，对于里面的代码逻辑其实是不懂的，一切都是靠实际调试出来的</li><li>还有一个就是对于这个学习别人的建站教程，对应到自己这里还是有些细节上难以处理的问题，还得慢慢学习</li></ol><h2 id="4-写在最后"><a href="#4-写在最后" class="headerlink" title="4. 写在最后"></a>4. 写在最后</h2><p>这篇博文其实也是第一次比较正式的在自己的博客上写文章，也是比较符合我的一个心得记录.</p><p>感觉知识是没有尽头的，最近在学习很多新的知识，在不断的学习中才感到自己的渺小，希望这个博客能见证<br>我的一步步成长，我也会不定期的在这里发布我的学习生活心得，并且不断的完善和美化优化我的博客，<br>就这样吧～～～😄</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心得体会 </tag>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两道离散数学中的算法题</title>
      <link href="/2023/06/18/%E4%B8%A4%E9%81%93%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%E9%A2%98/"/>
      <url>/2023/06/18/%E4%B8%A4%E9%81%93%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>记录一下在学习离散数学的时候的两个实验，用 java 实现 warshall 算法来求传递闭包，用Kruskal 算法来求最小生成树</p><span id="more"></span><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p> <strong>1.Warshall 算法求传递闭包</strong><br><a href="#section1">1.实验过程中遇到的问题及其解决过程</a><br><a href="#section2">2.实现算法并编写一个程序求出给定关系的闭包</a><br><a href="#section3">3.实验结束时的程序清单及运行结果及实验总结</a></p><p><strong>2.Kruskal 算法求最小生成树</strong><br><a href="#section4">1.实验过程中遇到的问题及其解决过程</a><br><a href="#section5">2.利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树</a><br><a href="#section6">3.实验结束时的程序清单及运行结果及实验总结</a></p><hr><h2 id="1-Warshall-算法求传递闭包"><a href="#1-Warshall-算法求传递闭包" class="headerlink" title="1.Warshall 算法求传递闭包"></a>1.Warshall 算法求传递闭包</h2><p><a name="section1"></a></p><h3 id="1-实验过程遇到的问题及其解决过程"><a href="#1-实验过程遇到的问题及其解决过程" class="headerlink" title="1.实验过程遇到的问题及其解决过程"></a>1.实验过程遇到的问题及其解决过程</h3><p>如何设计算法，利用自然的逻辑进行，先循环每一行i，在检查第 i 列有哪些元素为 1，记录这些列号 j，把第 i 行的元素利用逻辑加法（我采用了三目运算）加到第 j 行，这里引入了第三层循环 ，并且每次运算都做了打印处理方便调试<br><a name="section2"></a></p><h3 id="2-实现算法并编写一个程序求出给定关系的闭包"><a href="#2-实现算法并编写一个程序求出给定关系的闭包" class="headerlink" title="2.实现算法并编写一个程序求出给定关系的闭包"></a>2.实现算法并编写一个程序求出给定关系的闭包</h3><p><strong>Warshall类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Warshall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化矩阵</span></span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                arr[i][j] = <span class="number">0</span>;<span class="comment">//先将所有元素设置为 0，再具体添加测试</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//warshall算法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环每一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//看第 i 列哪些元素为 1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j][i] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">//第 j 行 i 列的元素为 1</span></span><br><span class="line">                    <span class="comment">//把第 i 行的所有元素逻辑加到第 j 行</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>; s &lt; <span class="number">4</span>; s++) &#123;</span><br><span class="line">                        arr[j][s] = (arr[j][s] + arr[i][s]) == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;<span class="comment">//利用三目运算符</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">//每循环一行打印一次矩阵</span></span><br><span class="line">            System.out.println(<span class="string">&quot;\n----------第&quot;</span> + count + <span class="string">&quot;次-----------\n&quot;</span>);</span><br><span class="line">            printArr(arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[][] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] i : arr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">4</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(j + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="section3"></a></p><h3 id="3-实验结束的程序清单及运行结果及实验总结"><a href="#3-实验结束的程序清单及运行结果及实验总结" class="headerlink" title="3.实验结束的程序清单及运行结果及实验总结"></a>3.实验结束的程序清单及运行结果及实验总结</h3><p>0 1 0 0</p><p>0 0 1 1</p><p>1 1 0 0</p><p>1 0 0 0<br>—————第1次—————-</p><p>0 1 0 0</p><p>0 0 1 1</p><p>1 1 0 0</p><p>1 1 0 0<br>—————第2次—————-</p><p>0 1 1 1</p><p>0 0 1 1</p><p>1 1 1 1</p><p>1 1 1 1<br>—————第3次—————-</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1<br>—————第4次—————-</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1<br>Process finished with exit code 0<br>实验总结：<br>编写程序之前要理解 warshall 算法的步骤，才能清晰的写出程序运行逻辑</p><hr><h2 id="2-Kruskal-算法求最小生成树"><a href="#2-Kruskal-算法求最小生成树" class="headerlink" title="2.Kruskal 算法求最小生成树"></a>2.Kruskal 算法求最小生成树</h2><p><a name="section4"></a></p><h3 id="1-实验过程中遇到的问题及其解决过程"><a href="#1-实验过程中遇到的问题及其解决过程" class="headerlink" title="1.实验过程中遇到的问题及其解决过程"></a>1.实验过程中遇到的问题及其解决过程</h3><p>难点在于怎么样把图 G<V,E,C>设计成一些类的组合   </p><p>我在实现过程中，封装了 Graph 类表示图，Edge 表示边，并且把权重封装在 Edge 类中作为属性(为了方便权限设置为 public)，并且在 Graph 类中创建静态方法，实现打印点，边，按权重为边集合排序和初始化边集合的静态方法，直接在 main 方法中用 Edge 类调用，在 Kruskal 类中，我抽取了三个静态方法，实现 main 方法的简洁性，提高了代码的阅读性。   </p><p>第一个静态方法是设置点集合，可以在静态方法中自己调试点的个数，同理第二个静态方法是设置边集合，可以调试一些带权连通图，只需要把这些关系自己创建出对应的边即可，第三个静态方法是 Kruskal 算法的实现，我在里面利用一些计数器原理判断是否已经添加了（点数 -1）条边，并且利用 Graph 类封装的 isAdd 属性配合一个判断是否有回路的算法，来生成最小生成树的图newGraph</p><p> 中间遇到了一些问题通过断点调试 debug 解决了，主要是一些下标处理问题，在没有 isAdd 属性的时候，会有一些造成回路的边被重复判断，还有是引入了 count 防止跳过造成回路的边之后，i 的值作为下标赋值给新边的时候造成 ArrayIndexOutOfBounds 异常，暂且测试了两个例子，后面有时间会进行更多测试，并且支持自定义添加图，并判断是否为连通图再进行最小生成树的生成操作</p><p><a name="section5"></a></p><h3 id="2-利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树"><a href="#2-利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树" class="headerlink" title="2.利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树"></a>2.利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树</h3><p><strong>Kruskal类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Kruskal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置点集合</span></span><br><span class="line">        <span class="type">int</span>[] points = setPoint();</span><br><span class="line">        <span class="comment">//设置边集合</span></span><br><span class="line">        Edge[] edges = setEdge();</span><br><span class="line">        <span class="comment">//Kruskal算法</span></span><br><span class="line">        kruskalMethod(points, edges);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">kruskalMethod</span><span class="params">(<span class="type">int</span>[] points, Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="comment">//Kruskal算法</span></span><br><span class="line">        <span class="comment">//按照权重从小到大的顺序添加边，已经排序好了直接按照边序号来</span></span><br><span class="line">        <span class="comment">//创建新图(只需要点的总数-1 条边）</span></span><br><span class="line">        Edge[] newEdge = <span class="keyword">new</span> <span class="title class_">Edge</span>[points.length - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//初始化新边集合</span></span><br><span class="line">        Graph.setEmptyEdge(newEdge);</span><br><span class="line">        <span class="type">Graph</span> <span class="variable">newGraph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(points, newEdge);</span><br><span class="line">        <span class="comment">//循环添加新边</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            <span class="comment">//设置第一,二条边</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || i == <span class="number">1</span>) &#123;</span><br><span class="line">                newGraph.edges[i].point1 = edges[i].point1;</span><br><span class="line">                newGraph.edges[i].point2 = edges[i].point2;</span><br><span class="line">                newGraph.edges[i].weight = edges[i].weight;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//当边数超过三时，需要判断是否形成回路，如果新生成的边的终点和前面已存在的边的起点重合，则判断为回路</span></span><br><span class="line">                <span class="keyword">if</span> (count == points.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;已添加完&quot;</span> + count + <span class="string">&quot;条边，不再继续添加(注意：本算法只列出了一种最小生成树！）&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//利用循环判断是否有回路</span></span><br><span class="line">                <span class="type">int</span> j;</span><br><span class="line">                <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    <span class="comment">//如果跳过了一条边，也相当于添加过了，就不要再重新比了，相当于做了一个标记，这条边我不要</span></span><br><span class="line">                    <span class="keyword">if</span> (edges[i].point2 == edges[j].point1 &amp;&amp; !edges[j].isAdd) &#123;</span><br><span class="line">                        edges[i].isAdd = <span class="literal">true</span>;</span><br><span class="line">                        System.out.println(<span class="string">&quot;有回路，跳过原第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot; 条边&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断上方是否正常跳出循环</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//break 跳出，说明有回路，更新 i 为下一条边</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//正常退出，正常添加新边,注意要用 count 来为新的边赋值，否则会随着一些边的跳过，导致 i 作为新边下标的越界问题</span></span><br><span class="line">                    newGraph.edges[count].point1 = edges[i].point1;</span><br><span class="line">                    newGraph.edges[count].point2 = edges[i].point2;</span><br><span class="line">                    newGraph.edges[count].weight = edges[i].weight;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看新边集合</span></span><br><span class="line">        Graph.printEdges(newGraph.edges);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] setPoint() &#123;</span><br><span class="line">        <span class="comment">//创建点集合</span></span><br><span class="line">        <span class="type">int</span>[] points = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//将点集合的值视为编号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            points[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印点集合</span></span><br><span class="line">        Graph.printPoints(points);</span><br><span class="line">        <span class="keyword">return</span> points;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Edge[] setEdge() &#123;</span><br><span class="line">        <span class="comment">//构造连通图</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1-2,5</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2-3,5</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3-5,6</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2-4,12</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 4-5,12</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2-5,15</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3-4,17</span></span><br><span class="line"><span class="comment">         //         */</span></span><br><span class="line"><span class="comment">//        Edge[] edges = new Edge[7];</span></span><br><span class="line"><span class="comment">//        edges[0] = new Edge(1, 2, 5);</span></span><br><span class="line"><span class="comment">//        edges[1] = new Edge(2, 3, 5);</span></span><br><span class="line"><span class="comment">//        edges[2] = new Edge(3, 5, 6);</span></span><br><span class="line"><span class="comment">//        edges[3] = new Edge(2, 4, 12);</span></span><br><span class="line"><span class="comment">//        edges[4] = new Edge(4, 5, 12);</span></span><br><span class="line"><span class="comment">//        edges[5] = new Edge(2, 5, 15);</span></span><br><span class="line"><span class="comment">//        edges[6] = new Edge(3, 4, 17);</span></span><br><span class="line">        Edge[] edges = <span class="keyword">new</span> <span class="title class_">Edge</span>[<span class="number">8</span>];</span><br><span class="line">        edges[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        edges[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">        edges[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">        edges[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        edges[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        edges[<span class="number">5</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">        edges[<span class="number">6</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        edges[<span class="number">7</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//按权重排序</span></span><br><span class="line">        Graph.sortEdge(edges);</span><br><span class="line">        <span class="comment">//打印边集合</span></span><br><span class="line">        Graph.printEdges(edges);</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Graph类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] points;</span><br><span class="line">    <span class="keyword">public</span> Edge[] edges;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span>[] points, Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.points = points;</span><br><span class="line">        <span class="built_in">this</span>.edges = edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printPoints</span><span class="params">(<span class="type">int</span>[] points)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : points) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;点 &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printEdges</span><span class="params">(Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Edge e : edges) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span> + count + <span class="string">&quot;条边 : &quot;</span>);</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortEdge</span><span class="params">(Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="comment">//遍历权重</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; edges.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edges[j].weight &lt; edges[i].weight) &#123;</span><br><span class="line">                    <span class="type">Edge</span> <span class="variable">tmp</span> <span class="operator">=</span> edges[j];</span><br><span class="line">                    edges[j] = edges[i];</span><br><span class="line">                    edges[i] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setEmptyEdge</span><span class="params">(Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            edges[i] = <span class="keyword">new</span> <span class="title class_">Edge</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Edge类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> point1;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> point2;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> isAdd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> point1, <span class="type">int</span> point2, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.point1 = point1;</span><br><span class="line">        <span class="built_in">this</span>.point2 = point2;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        isAdd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.point1 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.point2 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.weight = <span class="number">0</span>;</span><br><span class="line">        isAdd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;point1 : &quot;</span> + point1 + <span class="string">&quot; point2 : &quot;</span> + point2 + <span class="string">&quot; weight = &quot;</span> + weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="section6"></a></p><h3 id="3-实验结束时的程序清单及运行结果及实验总结"><a href="#3-实验结束时的程序清单及运行结果及实验总结" class="headerlink" title="3.实验结束时的程序清单及运行结果及实验总结"></a>3.实验结束时的程序清单及运行结果及实验总结</h3><p>点 1</p><p>点 2</p><p>点 3</p><p>点 4</p><p>点 5</p><p>第1条边 : point1 : 1 point2 : 2 weight = 1</p><p>第2条边 : point1 : 5 point2 : 2 weight = 1</p><p>第3条边 : point1 : 3 point2 : 4 weight = 2</p><p>第4条边 : point1 : 5 point2 : 1 weight = 2</p><p>第5条边 : point1 : 2 point2 : 3 weight = 2</p><p>第6条边 : point1 : 4 point2 : 2 weight = 2</p><p>第7条边 : point1 : 4 point2 : 5 weight = 3</p><p>第8条边 : point1 : 1 point2 : 4 weight = 3</p><p>有回路，跳过原第4 条边</p><p>有回路，跳过原第5 条边</p><p>已添加完4条边，不再继续添加(注意：本算法只列出了一种最小生成树！）</p><p>第1条边 : point1 : 1 point2 : 2 weight = 1</p><p>第2条边 : point1 : 5 point2 : 2 weight = 1</p><p>第3条边 : point1 : 3 point2 : 4 weight = 2</p><p>第4条边 : point1 : 4 point2 : 2 weight = 2</p><p>Process finished with exit code 0</p><p>总结的话在（1）里面已经总结了</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 离散数学 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
