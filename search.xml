<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PythonLearning_3</title>
      <link href="/2024/03/30/pythonLearn_3/"/>
      <url>/2024/03/30/pythonLearn_3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.youtube.com/watch?v=XKHEtdqhLK8&amp;t=824s">Learn From Bro Code</a><br>P56-</p><span id="more"></span><h1 id="56-Map"><a href="#56-Map" class="headerlink" title="56 Map"></a>56 Map</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map function can apply a function to each item in an iterable</span></span><br><span class="line"></span><br><span class="line">phone = [</span><br><span class="line">    (<span class="string">&quot;HuaWei&quot;</span>, <span class="number">9999</span>),</span><br><span class="line">    (<span class="string">&quot;Apple&quot;</span>, <span class="number">6899</span>),</span><br><span class="line">    (<span class="string">&quot;ViVo&quot;</span>, <span class="number">5999</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">half_price = <span class="keyword">lambda</span> data: (data[<span class="number">0</span>], data[<span class="number">1</span>] / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">count_phone = <span class="built_in">map</span>(half_price, phone)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> count_phone:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">reduce_value_phone = <span class="built_in">map</span>(<span class="keyword">lambda</span> data: (data[<span class="number">0</span>], data[<span class="number">1</span>] - <span class="number">500</span>), phone)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reduce_value_phone:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h1 id="57-Filter"><a href="#57-Filter" class="headerlink" title="57 Filter"></a>57 Filter</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">friends = [</span><br><span class="line">    (<span class="string">&quot;John&quot;</span>, <span class="number">28</span>),</span><br><span class="line">    (<span class="string">&quot;Alice&quot;</span>, <span class="number">23</span>),</span><br><span class="line">    (<span class="string">&quot;Bob&quot;</span>, <span class="number">17</span>),</span><br><span class="line">    (<span class="string">&quot;House&quot;</span>, <span class="number">21</span>),</span><br><span class="line">    (<span class="string">&quot;Lucy&quot;</span>, <span class="number">7</span>),</span><br><span class="line">    (<span class="string">&quot;Young&quot;</span>, <span class="number">78</span>),</span><br><span class="line">    (<span class="string">&quot;Olivia&quot;</span>, <span class="number">19</span>),</span><br><span class="line">    (<span class="string">&quot;Tray&quot;</span>, <span class="number">20</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">drinking_friends = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> friend: (friend[<span class="number">1</span>] &gt;= <span class="number">19</span>), friends))</span><br><span class="line">drinking_friends.sort(key=<span class="keyword">lambda</span> friend: friend[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> drinking_friends:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h1 id="58-Reduce"><a href="#58-Reduce" class="headerlink" title="58 Reduce"></a>58 Reduce</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reduce function</span></span><br><span class="line"><span class="comment"># accept an iterable then do something to the first and second item the result will be the new first item</span></span><br><span class="line"><span class="comment"># repeat this process until one item left</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">separate_cards = [<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;O&#x27;</span>]</span><br><span class="line"></span><br><span class="line">greet = functools.reduce(<span class="keyword">lambda</span> x, y: x + y, separate_cards)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet)</span><br><span class="line"></span><br><span class="line">factorial = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">res = functools.reduce(<span class="keyword">lambda</span> x, y: x * y, factorial)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h1 id="59-List-Comprehension"><a href="#59-List-Comprehension" class="headerlink" title="59 List Comprehension"></a>59 List Comprehension</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list comprehension</span></span><br><span class="line"><span class="comment"># make code more clean and tidy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list = [expression for item in iterable]</span></span><br><span class="line"></span><br><span class="line">list1 = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)  <span class="comment"># res = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list = [expression for item in iterable condition]</span></span><br><span class="line">stu_grade = [<span class="number">90</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line">res1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> stu_grade <span class="keyword">if</span> i &gt;= <span class="number">60</span>]</span><br><span class="line"><span class="built_in">print</span>(res1)  <span class="comment"># [90, 80, 70, 60]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list = [expression if-else item in iterable]</span></span><br><span class="line"></span><br><span class="line">res2 = [i <span class="keyword">if</span> i &gt;= <span class="number">60</span> <span class="keyword">else</span> <span class="string">&#x27;N_pass&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> stu_grade]</span><br><span class="line"><span class="built_in">print</span>(res2)  <span class="comment"># [90, 80, 70, 60, &#x27;N_pass&#x27;, &#x27;N_pass&#x27;, &#x27;N_pass&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test map</span></span><br><span class="line">map_res = [i * <span class="number">0.9</span> <span class="keyword">for</span> i <span class="keyword">in</span> stu_grade]</span><br><span class="line"><span class="built_in">print</span>(map_res)  <span class="comment"># [81.0, 72.0, 63.0, 54.0, 45.0, 36.0, 27.0]</span></span><br></pre></td></tr></table></figure><h1 id="60-Dictionary-Comprehension"><a href="#60-Dictionary-Comprehension" class="headerlink" title="60 Dictionary Comprehension"></a>60 Dictionary Comprehension</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dictionary = &#123;key : expression for (key, value) in iterable&#125;</span></span><br><span class="line">temp_H = &#123;<span class="string">&#x27;HangZhou&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;HaErBin&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;TaiZhou&#x27;</span>: <span class="number">81</span>, <span class="string">&#x27;SanYa&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;HaiNan&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;BeiJing&#x27;</span>: <span class="number">35</span>&#125;</span><br><span class="line"></span><br><span class="line">temp_C = &#123;key: <span class="built_in">round</span>((value - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span>) <span class="keyword">for</span> key, value <span class="keyword">in</span> temp_H.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(temp_C)  <span class="comment"># &#123;&#x27;HangZhou&#x27;: 27, &#x27;HaErBin&#x27;: -7, &#x27;TaiZhou&#x27;: 27, &#x27;SanYa&#x27;: 10, &#x27;HaiNan&#x27;: 38, &#x27;BeiJing&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dictionary = &#123;key : expression for (key, value) in iterable condition&#125;</span></span><br><span class="line">high_temp = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> temp_C.items() <span class="keyword">if</span> value &gt;= <span class="number">25</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(high_temp)  <span class="comment"># &#123;&#x27;HangZhou&#x27;: 27, &#x27;TaiZhou&#x27;: 27, &#x27;HaiNan&#x27;: 38&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dictionary = &#123;key : (if/else) for (key, value) in iterable&#125;</span></span><br><span class="line"></span><br><span class="line">desc_temp_1 = &#123;key: <span class="string">&#x27;hot&#x27;</span> <span class="keyword">if</span> value &gt;= <span class="number">25</span> <span class="keyword">else</span> <span class="string">&#x27;cold&#x27;</span> <span class="keyword">for</span> key, value <span class="keyword">in</span> temp_C.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    desc_temp_1)  <span class="comment"># &#123;&#x27;HangZhou&#x27;: &#x27;hot&#x27;, &#x27;HaErBin&#x27;: &#x27;cold&#x27;, &#x27;TaiZhou&#x27;: &#x27;hot&#x27;, &#x27;SanYa&#x27;: &#x27;cold&#x27;, &#x27;HaiNan&#x27;: &#x27;hot&#x27;, &#x27;BeiJing&#x27;: &#x27;cold&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dictionary = &#123;key : function for (key, value) in iterable&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail_desc</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> value &gt;= <span class="number">35</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;super hot&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> value &gt;= <span class="number">25</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;not so hot&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> value &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;comfort temp&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> value &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;little cold&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;cooooooold!!!!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">desc_temp_2 = &#123;key: detail_desc(value) <span class="keyword">for</span> key, value <span class="keyword">in</span> temp_C.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    desc_temp_2)  <span class="comment"># &#123;&#x27;HangZhou&#x27;: &#x27;not so hot&#x27;, &#x27;HaErBin&#x27;: &#x27;cooooooold!!!!&#x27;, &#x27;TaiZhou&#x27;: &#x27;not so hot&#x27;, &#x27;SanYa&#x27;: </span></span><br><span class="line"><span class="comment"># &#x27;comfort temp&#x27;, &#x27;HaiNan&#x27;: &#x27;super hot&#x27;, &#x27;BeiJing&#x27;: &#x27;little cold&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonLearning_2</title>
      <link href="/2024/03/25/pythonLearn_2/"/>
      <url>/2024/03/25/pythonLearn_2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.youtube.com/watch?v=XKHEtdqhLK8&amp;t=824s">Learn From Bro Code</a><br>P40-P55</p><span id="more"></span><h1 id="40-41-Object-Oriented-Programming-OOP-amp-Variable-Type"><a href="#40-41-Object-Oriented-Programming-OOP-amp-Variable-Type" class="headerlink" title="40-41 Object Oriented Programming(OOP) &amp; Variable Type"></a>40-41 Object Oriented Programming(OOP) &amp; Variable Type</h1><p>Peron.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="comment"># class variable</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        <span class="comment"># instance variable</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;My name is &quot;</span> + self.name + <span class="string">&quot;. I am a &quot;</span> + self.gender)</span><br></pre></td></tr></table></figure><p>Test code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> resourse.Person <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line">person = Person(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;man&quot;</span>)</span><br><span class="line"></span><br><span class="line">person.speak()</span><br></pre></td></tr></table></figure><h1 id="42-44-Inheritance"><a href="#42-44-Inheritance" class="headerlink" title="42-44 Inheritance"></a>42-44 Inheritance</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Organism</span>:</span><br><span class="line">    alive = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Inherit from Organism</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prey</span>(<span class="title class_ inherited__">Organism</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">flee</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Prey is fleeing&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Inherit from Organism</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Predator</span>(<span class="title class_ inherited__">Organism</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hunt</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Predator is hunting&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Multi-inheritance</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span>(<span class="title class_ inherited__">Prey</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;rabbit is jumping&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Multi-inheritance</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hawk</span>(<span class="title class_ inherited__">Predator</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hawk is flying&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple inheritance</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span>(Prey, Predator):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fish is swimming&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Inherit <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">rabbit = Rabbit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rabbit.alive)</span><br><span class="line">rabbit.flee()</span><br><span class="line">rabbit.jump()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">hawk = Hawk()</span><br><span class="line"><span class="built_in">print</span>(hawk.alive)</span><br><span class="line">hawk.hunt()</span><br><span class="line">hawk.fly()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">fish = Fish()</span><br><span class="line"><span class="built_in">print</span>(fish.alive)</span><br><span class="line">fish.flee()</span><br><span class="line">fish.hunt()</span><br><span class="line">fish.swim()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>True<br>Prey is fleeing<br>rabbit is jumping<br>True<br>Predator is hunting<br>Hawk is flying<br>True<br>Prey is fleeing<br>Predator is hunting<br>fish is swimming</p></blockquote><p>After overring method</p><p>&gt;<br>&gt;</p><blockquote><p>True<br>Prey is fleeing<br>rabbit is jumping<br>True<br>Predator is hunting<br>Hawk is flying<br>True<br>Prey is fleeing<br>Predator is hunting<br>fish is swimming</p></blockquote><h1 id="46-Method-Chain"><a href="#46-Method-Chain" class="headerlink" title="46 Method Chain"></a>46 Method Chain</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Starting the car&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drive</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Driving the car&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Stopping the car&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">car = Car()</span><br><span class="line"><span class="comment"># method chain</span></span><br><span class="line">car.start().drive().stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Starting the car<br>Driving the car<br>Stopping the car</p></blockquote><h1 id="47-Super-Function-super"><a href="#47-Super-Function-super" class="headerlink" title="47 Super Function super()"></a>47 Super Function super()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, length, width</span>):</span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span>(<span class="title class_ inherited__">Rectangle</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, length, width</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(length, width)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length * self.width</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cube</span>(<span class="title class_ inherited__">Rectangle</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, length, width, height</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(length, width)</span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">volume</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.width * self.height * self.height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">square = Square(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">cube = Cube(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(square.area())</span><br><span class="line"><span class="built_in">print</span>(cube.volume())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Tips-is-operator"><a href="#Tips-is-operator" class="headerlink" title="Tips: is operator"></a>Tips: is operator</h1><p>The ‘is’ operator<br>Unlike the double equals operator “==”, the “is” operator does not match the values of the variables, but the instances themselves. </p><p><a href="https://www.prepbytes.com/blog/python/is-operator-in-python/">Click This link to see the details of is operation</a></p><h1 id="Abstract-class"><a href="#Abstract-class" class="headerlink" title="Abstract class"></a>Abstract class</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abstract class must involve at least one abstract method</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to use abs class and abs method</span></span><br><span class="line"><span class="comment"># we need to import sth</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># abc =&gt; abstract based class</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bike</span>(<span class="title class_ inherited__">Vehicle</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bike started&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(<span class="title class_ inherited__">Vehicle</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Car started&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Can&#x27;t instantiate abstract class Vehicle with abstract method start</span></span><br><span class="line"><span class="comment"># vehicle = Vehicle()</span></span><br><span class="line"></span><br><span class="line">bike = Bike()</span><br><span class="line">bike.start()</span><br><span class="line">car = Car()</span><br><span class="line">car.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Object-as-argument"><a href="#Object-as-argument" class="headerlink" title="Object as argument"></a>Object as argument</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    color = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bike</span>:</span><br><span class="line">    color = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_color</span>(<span class="params">obj, color</span>):</span><br><span class="line">    obj.color = color</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">car = Car()</span><br><span class="line">change_color(car, <span class="string">&quot;White&quot;</span>)</span><br><span class="line">bike = Bike()</span><br><span class="line">change_color(bike, <span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(car.color + <span class="string">&quot;\n&quot;</span> + bike.color)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Duck-typing"><a href="#Duck-typing" class="headerlink" title="Duck typing"></a>Duck typing</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># duck typing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Duck is walking&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Duck is talking&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chicken</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Chicken is walking&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hunt</span>(<span class="params">self, duck</span>):</span><br><span class="line">        duck.walk()</span><br><span class="line">        duck.talk()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you catch it!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">duck = Duck()</span><br><span class="line">chicken = Chicken()</span><br><span class="line"></span><br><span class="line">person = Person()</span><br><span class="line">person.hunt(duck)</span><br><span class="line">person.hunt(chicken)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Walrus-operator"><a href="#Walrus-operator" class="headerlink" title="Walrus operator"></a>Walrus operator</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Walrus operator is used to assign a value and make it a larger expression as a hole part</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for example (normal way)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># foods = []</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># while True:</span></span><br><span class="line"><span class="comment">#     food = input(&quot;What kind of food do you like ? : &quot;)</span></span><br><span class="line"><span class="comment">#     if food == &quot;quit&quot;:</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     foods.append(food)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># using walrus operator</span></span><br><span class="line">foods = []</span><br><span class="line"><span class="comment"># The != operator has higher precedence than the := walrus operator,</span></span><br><span class="line"><span class="comment"># while food := input(&quot;What kind of food do you like ? : &quot;) != &quot;quit&quot;:</span></span><br><span class="line"><span class="comment">#     foods.append(food)</span></span><br><span class="line"><span class="keyword">while</span> (food := <span class="built_in">input</span>(<span class="string">&quot;What food do you like ? &gt;&quot;</span>)) != <span class="string">&quot;quit&quot;</span>:</span><br><span class="line">    foods.append(food)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(foods)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Higher-Order-Function"><a href="#Higher-Order-Function" class="headerlink" title="Higher Order Function"></a>Higher Order Function</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example one</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loud</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> text.upper()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quite</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> text.lower()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(func)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello(loud(<span class="string">&quot;Hello World&quot;</span>))</span><br><span class="line">hello(quite(<span class="string">&quot;Hello World&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># example two</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divisor</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dividend</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> y / x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dividend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># now divide is a function(dividend) which contains an argument x = 2 and stored inside</span></span><br><span class="line">divide = divisor(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(divide(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># try to def a time function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor1</span>(<span class="params">x1: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">factor2</span>(<span class="params">x2</span>):</span><br><span class="line">        <span class="keyword">return</span> x1 * x2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> factor2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">factor = factor1(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(factor(<span class="number">4</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Lambda-Function"><a href="#Lambda-Function" class="headerlink" title="Lambda Function"></a>Lambda Function</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda parameters: expression</span></span><br><span class="line"></span><br><span class="line">double = <span class="keyword">lambda</span> x: x * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(double(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_args</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">sum</span> += arg</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add = <span class="keyword">lambda</span> *args: add_args(*args)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">lambda</span> *args, **kwargs: <span class="built_in">sum</span>(args) + <span class="built_in">sum</span>(kwargs.values())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">100</span>, <span class="number">200</span>, first=<span class="number">1</span>, second=<span class="number">2</span>, third=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># C language use this way but in python NO</span></span><br><span class="line"><span class="comment"># age_check = lambda age: (age &gt;= 18 ? True : False)</span></span><br><span class="line">age_check = <span class="keyword">lambda</span> age: <span class="literal">True</span> <span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(age_check(<span class="number">19</span>))</span><br><span class="line"><span class="built_in">print</span>(age_check(<span class="number">17</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Sort-Function"><a href="#Sort-Function" class="headerlink" title="Sort Function"></a>Sort Function</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># basic sort function</span></span><br><span class="line"><span class="comment"># two ways</span></span><br><span class="line"><span class="comment"># first: use method , object.sort()</span></span><br><span class="line"><span class="comment"># second: use function, sorted()</span></span><br><span class="line"></span><br><span class="line">student = [</span><br><span class="line">    (<span class="string">&quot;John&quot;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="number">3</span>),</span><br><span class="line">    (<span class="string">&quot;Colins&quot;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="string">&quot;Zach&quot;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">stu</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> stu:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># method</span></span><br><span class="line"><span class="comment"># student.sort()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># function</span></span><br><span class="line"><span class="comment"># !!! Attention : when using sorted function , it will not modify the original list, but return a new list ,and we need to capture it</span></span><br><span class="line"><span class="comment"># sorted(student)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted_student = sorted(student)</span></span><br><span class="line"><span class="comment"># show(sorted_student)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we can pass into a lambda function to designate which column we want to use as key to sort</span></span><br><span class="line">grade = <span class="keyword">lambda</span> grades: grades[<span class="number">1</span>]</span><br><span class="line">rank = <span class="keyword">lambda</span> ranks: ranks[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># use method with key designated to grade ,and use reverse to reverse the result</span></span><br><span class="line"><span class="comment"># student.sort(key=grade, reverse=True)</span></span><br><span class="line"><span class="comment"># show(student)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use function with key designated to rank</span></span><br><span class="line"><span class="comment"># sorted_student_by_rank = sorted(student, key=rank)</span></span><br><span class="line"><span class="comment"># show(sorted_student_by_rank)</span></span><br><span class="line"></span><br><span class="line">tuple_list = (</span><br><span class="line">    (<span class="string">&quot;John&quot;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="number">3</span>),</span><br><span class="line">    (<span class="string">&quot;Colins&quot;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="string">&quot;Zach&quot;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># we can&#x27;t use method tuple_list.sort() to sort a tuple but we can use sorted and capture a result</span></span><br><span class="line">res = <span class="built_in">sorted</span>(tuple_list, key=<span class="keyword">lambda</span> key: key[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tuple sorted \n&quot;</span>)</span><br><span class="line">show(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonLearning_1</title>
      <link href="/2024/03/23/pythonLearn_1/"/>
      <url>/2024/03/23/pythonLearn_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.youtube.com/watch?v=XKHEtdqhLK8&amp;t=824s">Learn From Bro Code</a><br>P29-p38</p><span id="more"></span><h1 id="29-Random-Number"><a href="#29-Random-Number" class="headerlink" title="29 - Random Number"></a>29 - Random Number</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate random integer number</span></span><br><span class="line"></span><br><span class="line">x = random.randint(<span class="number">1</span>, <span class="number">100</span>)  <span class="comment"># 1-100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The random integer number = &quot;</span>, x)</span><br><span class="line">y = random.random()  <span class="comment"># generate float number(0-1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The random float number = &quot;</span>, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># random can also be used in list</span></span><br><span class="line"></span><br><span class="line">myList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># random visit myList</span></span><br><span class="line"><span class="built_in">print</span>(random.choice(myList))</span><br><span class="line"></span><br><span class="line"><span class="comment"># shuffle myList</span></span><br><span class="line">shuffle = random.shuffle(myList)</span><br><span class="line"><span class="built_in">print</span>(shuffle)</span><br><span class="line"></span><br><span class="line"><span class="comment"># question : Why shuffle is None?</span></span><br><span class="line"><span class="comment"># The reason why shuffle is None is because the random.shuffle() function in Python shuffles the list in place and doesn&#x27;t return anything (or returns None).</span></span><br><span class="line"><span class="comment"># So when you do shuffle = random.shuffle(myList), you&#x27;re assigning the return value of random.shuffle(myList) to shuffle, which is None. This is why shuffle is None.</span></span><br><span class="line"><span class="comment"># To achieve what you intended, which is shuffling myList, you should just call random.shuffle(myList) without assigning its return value to any</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myList)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="30-Exception-catch"><a href="#30-Exception-catch" class="headerlink" title="30 - Exception catch"></a>30 - Exception catch</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exception catch except as else finally</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number as numerator : &quot;</span>))</span><br><span class="line">    y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number as denominator : &quot;</span>))</span><br><span class="line">    res = x / y</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="31-36-OS-SHUTIL-FILE"><a href="#31-36-OS-SHUTIL-FILE" class="headerlink" title="31 -  36 OS SHUTIL FILE"></a>31 -  36 OS SHUTIL FILE</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># shutil (shell utility)</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;/Users/c_11njxx/PycharmProjects/hello/resourse/test.txt&quot;</span></span><br><span class="line">copy_path = <span class="string">&quot;./resourse/copyTest.txt&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;File exists&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(path):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;This is a File&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path) <span class="keyword">as</span> file:</span><br><span class="line">                <span class="built_in">print</span>(file.read())</span><br><span class="line">                <span class="comment"># write into a file</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file1:</span><br><span class="line">                    file1.write(<span class="string">&quot;This is the write function\n&quot;</span>)</span><br><span class="line">                <span class="comment"># append text into file</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file2:</span><br><span class="line">                    file2.write(<span class="string">&quot;This is an append text line&quot;</span>)</span><br><span class="line">                shutil.copyfile(path, copy_path)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(copy_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file3:</span><br><span class="line">                    <span class="built_in">print</span>(file3.read())</span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(path):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;This is a directory&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;None&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># delete functions</span></span><br><span class="line">    <span class="comment"># delete a file</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.remove(<span class="string">&quot;resource_backup/copyTest.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="comment"># remove a directory (WRONG WAY)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.remove(<span class="string">&quot;resource_backup&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="comment"># RIGHT WAY(Not totally right)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.rmdir(<span class="string">&quot;resource_backup&quot;</span>)  <span class="comment"># rmdir cannot deleter a dir which contains files</span></span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="comment"># RIGHT WAY</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        shutil.rmtree(<span class="string">&quot;resource_backup&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="37-module"><a href="#37-module" class="headerlink" title="37 - module"></a>37 - module</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resourse.custom_module</span><br><span class="line">resourse.custom_module.hi()</span><br><span class="line"></span><br><span class="line"><span class="comment"># import resourse.custom_module as f1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f1.hi()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from resourse.custom_module import hi</span></span><br><span class="line"><span class="comment"># hi()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from resourse.custom_module import *</span></span><br><span class="line"><span class="comment"># # be careful when using it in big project duplicate name will occur</span></span><br><span class="line"><span class="comment"># hi()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="38-little-game"><a href="#38-little-game" class="headerlink" title="38 - little game"></a>38 - little game</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">choices = [<span class="string">&#x27;rock&#x27;</span>, <span class="string">&#x27;paper&#x27;</span>, <span class="string">&#x27;scissors&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Win</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;user choice = &quot;</span>, args[<span class="number">0</span>] + <span class="string">&quot; computer choice = &quot;</span>, args[<span class="number">1</span>] + <span class="string">&quot;\n You win&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Lose</span>(<span class="params">user, computer</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;user choice = &quot;</span>, user + <span class="string">&quot; computer choice = &quot;</span>, computer + <span class="string">&quot;\n You Lose&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Tie</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;user choice = &quot;</span>, user + <span class="string">&quot; computer choice = &quot;</span>, computer + <span class="string">&quot;\n Game Tied&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    computer = random.choice(choices)</span><br><span class="line"></span><br><span class="line">    user = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> user <span class="keyword">not</span> <span class="keyword">in</span> choices:</span><br><span class="line">        user = <span class="built_in">input</span>(<span class="string">&#x27;Enter your choice(rock,paper,scissors): &#x27;</span>).lower()</span><br><span class="line">        <span class="keyword">if</span> user == computer:</span><br><span class="line">            Tie(user=user, computer=computer)</span><br><span class="line">        <span class="keyword">elif</span> user == <span class="string">&#x27;rock&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> computer == <span class="string">&#x27;paper&#x27;</span>:</span><br><span class="line">                Lose(user, computer)</span><br><span class="line">            <span class="keyword">elif</span> computer == <span class="string">&#x27;scissors&#x27;</span>:</span><br><span class="line">                Win(user, computer)</span><br><span class="line">        <span class="keyword">elif</span> user == <span class="string">&#x27;paper&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> computer == <span class="string">&#x27;scissors&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;user choice = &quot;</span>, user + <span class="string">&quot; computer choice = &quot;</span>, computer + <span class="string">&quot;\n You Lose&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> computer == <span class="string">&#x27;rock&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;user choice = &quot;</span>, user + <span class="string">&quot; computer choice = &quot;</span>, computer + <span class="string">&quot;\n You win&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> user == <span class="string">&#x27;rock&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> computer == <span class="string">&#x27;papaer&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;user choice = &quot;</span>, user + <span class="string">&quot; computer choice = &quot;</span>, computer + <span class="string">&quot;\n You Lose&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> computer == <span class="string">&#x27;scissors&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;user choice = &quot;</span>, user + <span class="string">&quot; computer choice = &quot;</span>, computer + <span class="string">&quot;\n You win&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&quot;Do you want to play again?&quot;</span>).lower() != <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Quit,Bye&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法2_1</title>
      <link href="/2024/03/06/Algo_2_1/"/>
      <url>/2024/03/06/Algo_2_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>教材：《算法导论》<br>记录大二下学习数据结构的过程</p><span id="more"></span><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>由于是数据结构2课程，所以默认的我们是熟悉了一些基本的数据结构与算法<br>但是说实在的，这方面我还是做的比较薄弱<br>不过今天的课听起来感觉还不错，有思路过程有板书，随着课程的深入还是需要慢慢的补缺</p><h2 id="今日所学大致"><a href="#今日所学大致" class="headerlink" title="今日所学大致"></a>今日所学大致</h2><p>首先介绍了为什么要学习算法，用一个数学计算对比，得出了优化算法带来的收益要远大于优化硬件<br>随后通过了一个插入算法，引出了分析算法正确性，实质上就是通过数学归纳法<br>随后又提出了分析算法 使用RAM模型，提出了本书的一些约定性<br>再是提到了插入算法的优化，引出了分治的概念</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法导论 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨平台脚本与开放平台技术_1</title>
      <link href="/2024/03/06/React_1/"/>
      <url>/2024/03/06/React_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录大二下学习React的过程</p><span id="more"></span><h2 id="初识React"><a href="#初识React" class="headerlink" title="初识React"></a>初识React</h2><p>上了一次课，觉得react的一大特点就是他设计了一个虚拟DOM，这个虚拟DOM可以方便在每次添加数据<br>时不需要重新渲染重复的dom对象</p><h2 id="使用React"><a href="#使用React" class="headerlink" title="使用React"></a>使用React</h2><p>上课时的实例通过引入三个js文件，相当于引入第三方的框架，许多功能进行了封装，这是我学编程体会到的<br>一大特点，技术需要进行一定的封装，提高开发效率</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024开学第一周</title>
      <link href="/2024/03/06/life2/"/>
      <url>/2024/03/06/life2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下开学一周的生活</p><span id="more"></span><h2 id="关于我现在在做什么"><a href="#关于我现在在做什么" class="headerlink" title="关于我现在在做什么"></a>关于我现在在做什么</h2><p>这个学期，我多了一份新的工作，就是辅导员助理，感觉可以提高自己的除了学习生活外的其他技能<br>写这个文章其实也是为了重新开启我的博客<br>由于我的云服务器过期了，所以又把服务器挂到了github.io上<br>之后的话会经常更新一下</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习</title>
      <link href="/2023/08/04/LearnJava4/"/>
      <url>/2023/08/04/LearnJava4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h1 id="demo1-这个demo是关于queue的"><a href="#demo1-这个demo是关于queue的" class="headerlink" title="demo1(这个demo是关于queue的)"></a>demo1(这个demo是关于queue的)</h1><h2 id="1-Queue的异常体系"><a href="#1-Queue的异常体系" class="headerlink" title="_1.Queue的异常体系"></a>_1.Queue的异常体系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo1._1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//LinkedList既实现了List接口又实现了Queue接口</span></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//异常体系</span></span><br><span class="line">        <span class="comment">//添加操作（尾部）</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">           queue.add(<span class="number">123</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;add successful&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取头部元素</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">element</span> <span class="operator">=</span> queue.element();</span><br><span class="line">            System.out.println(<span class="string">&quot;element : &quot;</span> + element);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取头部元素并删除</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">remove</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">            System.out.println(<span class="string">&quot;remove : &quot;</span> + remove);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalStateException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再次获取和获取并删除都会抛出异常</span></span><br><span class="line">        <span class="comment">//获取头部元素</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">element</span> <span class="operator">=</span> queue.element();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取头部元素并删除</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">remove</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalStateException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2返回false或null"><a href="#2返回false或null" class="headerlink" title="_2返回false或null"></a>_2返回false或null</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo1._2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//返回false或null</span></span><br><span class="line">        <span class="comment">//添加操作</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isOffered</span> <span class="operator">=</span> queue.offer(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="comment">//获取首部元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">peek</span> <span class="operator">=</span> queue.peek();</span><br><span class="line">        System.out.println(peek);</span><br><span class="line">        <span class="comment">//获取首部元素并删除</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="comment">//再次获取为空</span></span><br><span class="line">        System.out.println(queue.peek());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="demo2-PriorityQueue"><a href="#demo2-PriorityQueue" class="headerlink" title="demo2(PriorityQueue)"></a>demo2(PriorityQueue)</h1><h2 id="1-String实现了comparable接口，可以使用PriorityQueue"><a href="#1-String实现了comparable接口，可以使用PriorityQueue" class="headerlink" title="_1(String实现了comparable接口，可以使用PriorityQueue)"></a>_1(String实现了comparable接口，可以使用PriorityQueue)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo2._1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        queue.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;peach&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            System.out.println(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="_2"></a>_2</h2><hr><p>与gpt的问答</p><p>用PriorityQueue实现银行排队业务</p><h3 id="Comparator-和-Comparable的区别"><a href="#Comparator-和-Comparable的区别" class="headerlink" title="Comparator 和 Comparable的区别"></a>Comparator 和 Comparable的区别</h3><p><code>Comparator</code> 和 <code>Comparable</code> 都是用于比较对象的接口，但它们有不同的用途和实现方式：</p><ol><li><p><code>Comparable</code> 接口：</p><ul><li>位于 <code>java.lang</code> 包下。</li><li>实现了 <code>Comparable</code> 接口的类可以通过实现 <code>compareTo()</code> 方法来定义对象之间的自然顺序（默认顺序）。</li><li><code>compareTo()</code> 方法返回一个整数，表示对象之间的比较结果。若返回负数，表示当前对象小于比较对象；若返回零，表示两个对象相等；若返回正数，表示当前对象大于比较对象。</li><li>使用 <code>Collections.sort()</code> 或 <code>Arrays.sort()</code> 等方法时，如果集合中的元素实现了 <code>Comparable</code> 接口，会按照定义的自然顺序进行排序。</li></ul></li><li><p><code>Comparator</code> 接口：</p><ul><li>位于 <code>java.util</code> 包下。</li><li>实现了 <code>Comparator</code> 接口的类可以通过实现 <code>compare()</code> 方法来定义不同的比较规则，实现自定义的排序方式。</li><li><code>compare()</code> 方法返回一个整数，表示两个对象之间的比较结果，规则与 <code>compareTo()</code> 相同。</li><li><code>Comparator</code> 接口适用于对已有的类进行比较操作，或者在不修改类本身的情况下，定义多种排序方式。</li></ul></li></ol><p>例如，假设有一个 <code>Person</code> 类，想对其进行排序，可以选择实现 <code>Comparable</code> 接口来定义对象之间的自然排序，或者使用 <code>Comparator</code> 接口来定义多种排序方式，如按照年龄、姓名等进行排序。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法等...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现 Comparable 接口的 compareTo 方法，按照年龄进行排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person other)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age - other.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Comparator 接口来定义按照姓名进行排序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person p1, Person p2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p1.getName().compareTo(p2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用时，可以根据需求选择合适的比较方式来对对象进行排序。</p><p><strong>Question<br>就是如果我有一个Person类，然后我就可以在这个类实现comparable接口，如果我还想要有更多的排序方法，就另外再去写一个类实现comparator接口，然后在集合里传入这个类是吗？</strong></p><p>是的，你理解得很正确！</p><p>如果你在 <code>Person</code> 类中实现了 <code>Comparable</code> 接口，那么你可以定义对象之间的自然排序方式，这个排序方式将成为默认的排序方式。</p><p>如果你还想定义其他不同的排序方式，可以通过实现 <code>Comparator</code> 接口来创建新的比较器类。你可以根据不同的排序需求编写不同的比较器类，例如按照姓名、年龄、身高等属性进行排序。</p><p>然后，你可以在集合中使用 <code>Collections.sort()</code> 或 <code>Arrays.sort()</code> 方法时，传入对应的比较器对象，以选择特定的排序方式进行排序。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="comment">// ... 其他属性和方法 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现 Comparable 接口的 compareTo 方法，按照年龄进行排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person other)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age - other.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Comparator 接口来定义按照姓名进行排序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person p1, Person p2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p1.getName().compareTo(p2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Comparator 接口来定义按照身高进行排序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeightComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person p1, Person p2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p1.getHeight() - p2.getHeight();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在使用时，你可以根据具体的排序需求选择对应的比较器类来进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; people = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 添加人员信息...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照年龄进行排序（使用对象的自然排序）</span></span><br><span class="line">Collections.sort(people);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照姓名进行排序</span></span><br><span class="line">Collections.sort(people, <span class="keyword">new</span> <span class="title class_">NameComparator</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照身高进行排序</span></span><br><span class="line">Collections.sort(people, <span class="keyword">new</span> <span class="title class_">HeightComparator</span>());</span><br></pre></td></tr></table></figure><p>通过这样的方式，你可以灵活地实现多种排序方式，而不需要修改 <code>Person</code> 类的实现。这样的设计使得代码更加灵活、可维护性更高。</p><h3 id="gpt解释代码"><a href="#gpt解释代码" class="headerlink" title="gpt解释代码"></a>gpt解释代码</h3><p>这段代码实现了一个自定义的 <code>UserComparator</code> 类，该类实现了 <code>Comparator&lt;User&gt;</code> 接口，用于比较两个 <code>User</code> 对象的大小。比较的规则如下：</p><ol><li><p>如果 <code>o1</code> 的 <code>id</code> 字符串以 <code>&#39;V&#39;</code> 开头而 <code>o2</code> 的 <code>id</code> 字符串以 <code>&#39;A&#39;</code> 开头，则 <code>o1</code> 大于 <code>o2</code>，返回 <code>-1</code>，表示 <code>o1</code> 排在 <code>o2</code> 前面。</p></li><li><p>如果 <code>o1</code> 的 <code>id</code> 字符串以 <code>&#39;A&#39;</code> 开头而 <code>o2</code> 的 <code>id</code> 字符串以 <code>&#39;V&#39;</code> 开头，则 <code>o1</code> 小于 <code>o2</code>，返回 <code>1</code>，表示 <code>o1</code> 排在 <code>o2</code> 后面。</p></li><li><p>如果 <code>o1</code> 和 <code>o2</code> 的 <code>id</code> 字符串相同，那么比较它们的 <code>num</code> 字段（数字部分）。将 <code>num</code> 字符串转换为整数，并比较两个整数的大小。如果 <code>num1</code> 大于 <code>num2</code>，则 <code>o1</code> 大于 <code>o2</code>，返回 <code>1</code>，表示 <code>o1</code> 排在 <code>o2</code> 后面；如果 <code>num1</code> 小于 <code>num2</code>，则 <code>o1</code> 小于 <code>o2</code>，返回 <code>-1</code>，表示 <code>o1</code> 排在 <code>o2</code> 前面。</p></li><li><p>如果 <code>o1</code> 和 <code>o2</code> 的 <code>id</code> 字符串既不是 <code>&#39;V&#39;</code> 开头也不是 <code>&#39;A&#39;</code> 开头，或者 <code>num</code> 字段无法转换为整数，则抛出运行时异常，表示无法进行比较。</p></li></ol><p>这个自定义的比较器根据 <code>User</code> 对象的 <code>id</code> 字符串和 <code>num</code> 字段实现了多级排序，首先根据 <code>id</code> 的 <code>&#39;V&#39;</code> 和 <code>&#39;A&#39;</code> 字符进行等级判断，然后根据 <code>num</code> 字段进行数字大小比较。在使用这个比较器时，可以通过传入 <code>UserComparator</code> 对象来实现不同的排序需求。</p><p><strong>是不是比如说我比较的时候想把前者放在后面，就返回1，这样说明前者大于后者，这样就会把前者放到后者的后面？</strong></p><p>对的，你说得很对！在自定义的比较器中，返回 <code>1</code> 表示前者大于后者，这样在排序时，前者会被放到后者的后面。返回 <code>-1</code> 表示前者小于后者，这样在排序时，前者会被放到后者的前面。通过自定义比较器的返回值，可以控制排序的顺序，从而实现不同的排序需求。</p><hr><p><strong>User类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo2._2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//返回第一个元素之后的元素（数字）</span></span><br><span class="line">        <span class="keyword">return</span> id.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>UserComparator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo2._2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User o1, User o2)</span> &#123;</span><br><span class="line">        <span class="comment">//有两种等级，V大于A，先判断等级，在判断数字</span></span><br><span class="line">        <span class="keyword">if</span> (o1.getId().charAt(<span class="number">0</span>) == <span class="string">&#x27;V&#x27;</span> &amp;&amp; o2.getId().charAt(<span class="number">0</span>) == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o1.getId().charAt(<span class="number">0</span>) == <span class="string">&#x27;A&#x27;</span> &amp;&amp; o2.getId().charAt(<span class="number">0</span>) == <span class="string">&#x27;V&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o1.getId().charAt(<span class="number">0</span>) == o2.getId().charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">//同级比较数字</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                num1 = Integer.parseInt(o1.getNum());</span><br><span class="line">                num2 = Integer.parseInt(o2.getNum());</span><br><span class="line">                <span class="keyword">return</span> num1 &gt; num2 ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can not be compared,please check&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo2._2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Queue集合，并且传入比较器</span></span><br><span class="line">        Queue&lt;User&gt; userQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">UserComparator</span>());</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        userQueue.offer(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Alice&quot;</span>,<span class="string">&quot;A1&quot;</span>));</span><br><span class="line">        userQueue.offer(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;A3&quot;</span>));</span><br><span class="line">        userQueue.offer(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Cathy&quot;</span>,<span class="string">&quot;A2&quot;</span>));</span><br><span class="line">        userQueue.offer(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;David&quot;</span>,<span class="string">&quot;A5&quot;</span>));</span><br><span class="line">        userQueue.offer(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Elle&quot;</span>,<span class="string">&quot;A42&quot;</span>));</span><br><span class="line">        userQueue.offer(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Frank&quot;</span>,<span class="string">&quot;V2&quot;</span>));</span><br><span class="line">        userQueue.offer(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;George&quot;</span>,<span class="string">&quot;V1&quot;</span>));</span><br><span class="line">        userQueue.offer(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Harden&quot;</span>,<span class="string">&quot;A12&quot;</span>));</span><br><span class="line">        userQueue.offer(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Imy&quot;</span>,<span class="string">&quot;A15&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!userQueue.isEmpty()) &#123;</span><br><span class="line">            System.out.println(userQueue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name=&#x27;George&#x27;, id=&#x27;V1&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;Frank&#x27;, id=&#x27;V2&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;Alice&#x27;, id=&#x27;A1&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;Cathy&#x27;, id=&#x27;A2&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;Bob&#x27;, id=&#x27;A3&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;David&#x27;, id=&#x27;A5&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;Harden&#x27;, id=&#x27;A12&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;Imy&#x27;, id=&#x27;A15&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;Elle&#x27;, id=&#x27;A42&#x27;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="demo3-Deque"><a href="#demo3-Deque" class="headerlink" title="demo3(Deque)"></a>demo3(Deque)</h1><h2 id="1"><a href="#1" class="headerlink" title="_1"></a>_1</h2><hr><p>Deque的基本操作<br>明确的指出First和Last<br>体会LinkedList这个具体实现类的强大性<br>理解抽象编程，尽量持有接口</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo3._1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//用Deque接口接收具体实现类实例</span></span><br><span class="line">        Deque&lt;String&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        method1(deque);</span><br><span class="line">        <span class="comment">//方法2:offer(F,L) peek(F,L),poll(F,L)</span></span><br><span class="line">        <span class="comment">//基本相似只是返回类型不同</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(Deque&lt;String&gt; deque)</span> &#123;</span><br><span class="line">        <span class="comment">//方法一:add , remove , get ，配合FirstLast</span></span><br><span class="line">        <span class="comment">//添加操作</span></span><br><span class="line">        deque.addFirst(<span class="string">&quot;A&quot;</span>);<span class="comment">//A</span></span><br><span class="line">        deque.addFirst(<span class="string">&quot;B&quot;</span>);<span class="comment">//B-A</span></span><br><span class="line">        deque.addLast(<span class="string">&quot;C&quot;</span>);<span class="comment">//B-A-C</span></span><br><span class="line">        deque.addLast(<span class="string">&quot;D&quot;</span>);<span class="comment">//B-A-C-D</span></span><br><span class="line">        <span class="comment">//打印查看</span></span><br><span class="line">        <span class="comment">//printDeque(deque);</span></span><br><span class="line">        <span class="comment">//get操作（查看不删除，类比element和remove）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;First = &quot;</span> + deque.getFirst());<span class="comment">//B</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Last  = &quot;</span> + deque.getLast());<span class="comment">//D</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无元素&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取并删除操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(deque.removeFirst() + <span class="string">&quot; \n&quot;</span>);<span class="comment">//移除B，A-C-D</span></span><br><span class="line">            System.out.println(deque.removeLast() + <span class="string">&quot;\n&quot;</span>);<span class="comment">//移除D，A-C</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无元素&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印查看，同时内部实现清空测试异常</span></span><br><span class="line">        printDeque(deque);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            deque.getFirst();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无元素&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            deque.removeLast();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无元素&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printDeque</span><span class="params">(Deque&lt;String&gt; deque)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            System.out.println(deque.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="demo4-Stack栈"><a href="#demo4-Stack栈" class="headerlink" title="demo4(Stack栈)"></a>demo4(Stack栈)</h1><h2 id="1-1"><a href="#1-1" class="headerlink" title="_1"></a>_1</h2><hr><p>栈由deque实现，用的时候仅调用<br>push（入栈）<br>pop（出栈）<br>peek（查看栈顶）</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo4._1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//不要使用遗留类</span></span><br><span class="line">        <span class="comment">//Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//用Deque实现栈</span></span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//入栈操作</span></span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//查看栈顶</span></span><br><span class="line">        System.out.println(stack.peek());</span><br><span class="line">        <span class="comment">//弹出</span></span><br><span class="line">        stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-用栈实现整形的进制转换-10-16"><a href="#2-用栈实现整形的进制转换-10-16" class="headerlink" title="_2(用栈实现整形的进制转换 10-16 )"></a>_2(用栈实现整形的进制转换 10-16 )</h2><hr><p> 二进制是Binary，简写为B</p><p>八进制是Octal，简写为O</p><p>十进制为Decimal，简写为D</p><p>十六进制为Hexadecimal，简写为H</p><hr><p><strong>Solution</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo4._2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建栈</span></span><br><span class="line">        Deque&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//10-&gt;A,11-&gt;B,A的ASCII码是65，则10-&gt; (char)55+10</span></span><br><span class="line">        <span class="comment">//利用循环先让商入栈，余数继续进行循环</span></span><br><span class="line">        dToH(stack, <span class="number">12500</span>);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            System.out.print(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dToH</span><span class="params">(Deque&lt;String&gt; stack, <span class="type">int</span> decimal)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">quotient</span> <span class="operator">=</span> decimal;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (quotient != <span class="number">0</span>) &#123;</span><br><span class="line">            mod = quotient % <span class="number">16</span>;</span><br><span class="line">            <span class="keyword">if</span> (mod &gt;= <span class="number">0</span> &amp;&amp; mod &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">//数字直接入栈</span></span><br><span class="line">                stack.push((String.valueOf(mod)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//处理后入栈</span></span><br><span class="line">                stack.push((String.valueOf((<span class="type">char</span>) (mod + <span class="number">55</span>))));</span><br><span class="line">            &#125;</span><br><span class="line">            quotient = quotient / <span class="number">16</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-利用Stack把字符串中缀表达式编译为后缀表达式，然后再利用栈执行后缀表达式获得计算结果"><a href="#4-利用Stack把字符串中缀表达式编译为后缀表达式，然后再利用栈执行后缀表达式获得计算结果" class="headerlink" title="_4* (利用Stack把字符串中缀表达式编译为后缀表达式，然后再利用栈执行后缀表达式获得计算结果)"></a>_4* (利用Stack把字符串中缀表达式编译为后缀表达式，然后再利用栈执行后缀表达式获得计算结果)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.th4.demo4._3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;1+2*(9-5)&quot;</span>;</span><br><span class="line">        <span class="type">SuffixExpression</span> <span class="variable">se</span> <span class="operator">=</span> compile(exp);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> se.execute();</span><br><span class="line">        System.out.println(exp + <span class="string">&quot; = &quot;</span> + result + <span class="string">&quot; &quot;</span> + (result == <span class="number">1</span> + <span class="number">2</span> * (<span class="number">9</span> - <span class="number">5</span>) ? <span class="string">&quot;✓&quot;</span> : <span class="string">&quot;✗&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> SuffixExpression <span class="title function_">compile</span><span class="params">(String exp)</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">// 创建一个存放运算符的栈</span></span><br><span class="line">        Deque&lt;Character&gt; operatorStack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 创建一个存放后缀表达式的栈</span></span><br><span class="line">        Deque&lt;Character&gt; postfixStack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历中缀表达式的每个字符</span></span><br><span class="line">        <span class="type">char</span>[] charArray = exp.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : charArray) &#123;</span><br><span class="line">            <span class="comment">// 如果遇到了数字</span></span><br><span class="line">            <span class="keyword">if</span> (ch &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; ch &gt;= <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 添加到后缀表达式栈</span></span><br><span class="line">                postfixStack.push(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 遇到左括号,压入运算符栈</span></span><br><span class="line">                operatorStack.push(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 遇到右括号,利用循环弹出运算符栈的符号并存储到后缀运算符栈，直到遇到左括号，并将左括号弹出</span></span><br><span class="line">                <span class="keyword">while</span> (!operatorStack.isEmpty() &amp;&amp; operatorStack.peek() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    postfixStack.push(operatorStack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 弹出左括号</span></span><br><span class="line">                operatorStack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span> || ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 先简单处理四则运算,判断与栈顶的优先级</span></span><br><span class="line">                <span class="comment">// 如果为空，则直接压入</span></span><br><span class="line">                <span class="keyword">if</span> (operatorStack.isEmpty()) &#123;</span><br><span class="line">                    operatorStack.push(ch);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!operatorStack.isEmpty() &amp;&amp; operatorStack.peek() != <span class="string">&#x27;(&#x27;</span> &amp;&amp;</span><br><span class="line">                            priorityNum(ch) &lt;= priorityNum(operatorStack.peek())) &#123;</span><br><span class="line">                        <span class="comment">// 弹出栈顶运算符到后缀表达式栈，直到运算符栈为空或栈顶为左括号，忽略括号</span></span><br><span class="line">                        postfixStack.push(operatorStack.pop());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将ch压入运算符栈</span></span><br><span class="line">                    operatorStack.push(ch);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历完运算字符串后，将剩下的运算符取出并弹入后缀表达式栈</span></span><br><span class="line">        <span class="keyword">while</span> (!operatorStack.isEmpty()) &#123;</span><br><span class="line">            postfixStack.push(operatorStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SuffixExpression</span>(postfixStack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">priorityNum</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//如果是（）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuffixExpression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Deque&lt;Character&gt; postfixStack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    SuffixExpression(Deque&lt;Character&gt; postfixStack) &#123;</span><br><span class="line">        <span class="built_in">this</span>.postfixStack = postfixStack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建计算用的栈</span></span><br><span class="line">        Deque&lt;Character&gt; reverseStack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;Character&gt; calculateStack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//先处理反转栈</span></span><br><span class="line">        <span class="keyword">while</span> (!postfixStack.isEmpty()) &#123;</span><br><span class="line">            reverseStack.push(postfixStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">//遍历后缀表达式</span></span><br><span class="line">        <span class="keyword">while</span> (!reverseStack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> reverseStack.peek();</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//数字直接入栈</span></span><br><span class="line">                calculateStack.push(ch);</span><br><span class="line">                <span class="comment">//反转栈同时出栈</span></span><br><span class="line">                reverseStack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span> || ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//反转栈同时出栈</span></span><br><span class="line">                reverseStack.pop();</span><br><span class="line">                <span class="comment">//如果是运算符，弹出两个数字进行计算,并将计算结果压入栈</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">firstNum</span> <span class="operator">=</span> calculateStack.pop() - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">secondNum</span> <span class="operator">=</span> calculateStack.pop() - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span> -&gt; &#123;</span><br><span class="line">                        calculateStack.push((<span class="type">char</span>) ((firstNum + secondNum) + <span class="number">48</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span> -&gt; &#123;</span><br><span class="line">                        calculateStack.push((<span class="type">char</span>) ((secondNum - firstNum) + <span class="number">48</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span> -&gt; &#123;</span><br><span class="line">                        calculateStack.push((<span class="type">char</span>) ((firstNum * secondNum) + <span class="number">48</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span> -&gt; &#123;</span><br><span class="line">                        calculateStack.push((<span class="type">char</span>) ((secondNum / firstNum) + <span class="number">48</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回最终剩余的元素就是计算结果</span></span><br><span class="line">        <span class="keyword">return</span> calculateStack.pop() - <span class="number">48</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中间调试的时候一直出问题，最后发现是处理左括号的时候，直接就从operator的栈里面删除了，gpt修改之后确实解决了这个问题</p><hr><p>GPT ：当我进行改进时，主要关注的是如何更简洁和准确地处理运算符的优先级以及左括号的处理。我会详细解释两个写法的差别：</p><p>原始代码块（我写的）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (priorityNum(ch) &lt;= priorityNum(operatorStack.peek())) &#123;</span><br><span class="line">    <span class="comment">//如果ch的运算级别小于运算符栈顶的优先级</span></span><br><span class="line">    <span class="keyword">while</span> (!operatorStack.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//推出栈顶运算符到后缀表达式栈,直到运算符栈为空,忽略括号</span></span><br><span class="line">        <span class="keyword">if</span> (operatorStack.peek() == <span class="string">&#x27;(&#x27;</span> || operatorStack.peek() == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            operatorStack.pop();</span><br><span class="line">            f = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            postfixStack.push(operatorStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将ch压入运算符栈</span></span><br><span class="line">    <span class="keyword">if</span> (f) &#123;</span><br><span class="line">        <span class="comment">//补充左括号</span></span><br><span class="line">        operatorStack.push(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    operatorStack.push(ch);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//运算级高，不用弹出,直接压入栈</span></span><br><span class="line">    operatorStack.push(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改进后的代码块：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!operatorStack.isEmpty() &amp;&amp; operatorStack.peek() != <span class="string">&#x27;(&#x27;</span> &amp;&amp;</span><br><span class="line">       priorityNum(ch) &lt;= priorityNum(operatorStack.peek())) &#123;</span><br><span class="line">    <span class="comment">// 弹出栈顶运算符到后缀表达式栈，直到运算符栈为空或栈顶为左括号，忽略括号</span></span><br><span class="line">    postfixStack.push(operatorStack.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将ch压入运算符栈</span></span><br><span class="line">operatorStack.push(ch);</span><br></pre></td></tr></table></figure></p><p>主要的改进在于以下几点：</p><ol><li><p>改进后的代码通过一个循环实现了连续地弹出运算符栈的栈顶元素，并将这些运算符压入后缀表达式栈，直到运算符栈为空或栈顶元素为左括号为止。这样，我们只需要一个循环就能处理所有优先级小于等于当前运算符的情况。而在原始代码中，为了处理这一情况，使用了一个 <code>while</code> 循环和一个额外的标志变量 <code>f</code>。</p></li><li><p>改进后的代码更加简洁明了，没有涉及额外的条件判断和标志变量，使得逻辑更加清晰。</p></li><li><p>改进后的代码在处理左括号时，直接忽略了左括号，而在原始代码中，将左括号也压入了后缀表达式栈。在处理后缀表达式时，我们不需要考虑左括号，因为它们只用于优先级的比较。</p></li></ol><p>总的来说，改进后的代码更加简洁高效，并且更符合对后缀表达式计算的要求。在实现算法时，优先考虑使用简洁和清晰的逻辑，可以使代码更易于理解和维护。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Queue </tag>
            
            <tag> Deque </tag>
            
            <tag> Stack </tag>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode热题:最长连续序列</title>
      <link href="/2023/08/03/Leetcode3/"/>
      <url>/2023/08/03/Leetcode3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下学习算法的过程</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//用于记录每个连续序列</span></span><br><span class="line">        List&lt;Integer&gt; counts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//用于去除重复数据并排序</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加数据到set中</span></span><br><span class="line">        <span class="keyword">for</span> (Integer num : nums) &#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设计算法遍历set集合，记录连续序列的长度，间断后存储到counts集合中</span></span><br><span class="line">        <span class="comment">//Q1:如何实现在间断后，下一次遍历从上一次的后面开始？</span></span><br><span class="line">        <span class="comment">//Q2:如何记录每一次连续序列的长度？</span></span><br><span class="line">        <span class="comment">//Q3:如何判断是否连续？</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//标记是否为第一次，否则preNum为null</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFirst</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记录每一个分段的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Integer num : set) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isFirst) &#123;</span><br><span class="line">                <span class="comment">//第一次判断，先记录值，并且增加length,isFirst置反</span></span><br><span class="line">                preNum = num;</span><br><span class="line">                length++;</span><br><span class="line">                isFirst = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否连续</span></span><br><span class="line">            <span class="keyword">if</span>(num - preNum == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//连续,记录值，增加length</span></span><br><span class="line">                preNum = num;</span><br><span class="line">                length++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不连续,先添加当前连续的length值，重置length为1，防止下一次记录的时候少1</span></span><br><span class="line">                counts.add(length);</span><br><span class="line">                length = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//继续遍历接下来的set集合,记录值</span></span><br><span class="line">                preNum = num;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//这里有个问题，如果一直连续到最后，就会跳过这里的添加步骤，所以要在最后兜底</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//兜底</span></span><br><span class="line">        <span class="keyword">if</span>(length != <span class="number">0</span>) &#123;</span><br><span class="line">            counts.add(length);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//最后返回连续序列中的最大值</span></span><br><span class="line">        counts.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1 &gt; o2 ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">       <span class="keyword">if</span>(!counts.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> counts.get(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>写这道题，刚开始的时候思路就是想着怎么样判断连续，然后就用做差判断，有一点小问题都解决了没啥好讨论，然后尝试<strong>第一次提交</strong>，提交后发现有一部分数据没法通过，<strong>原因是我只记录了第一次连续序列的长度之后就直接return了</strong>，没有考虑后面还可能出现更长的连续序列，所以我想着这个跟分段有点类似，但这个分段又比较特殊，既要连续，又要记录长度，所以我就想着用一个集合记录每个分段的长度，然后最后自定义sort一下，返回最大值，由于时间复杂度有要求所以要一次遍历到底，于是我就设计了上面这个循环，<strong>第二次提交的时候</strong>又出现了问题，就是我的一些值总是比答案小1，后来发现是<strong>如果一直连续到最后，就会跳过else的添加步骤，所以要在最后兜底</strong>，最后也是成功的提交了，算是有些欣喜吧哈哈哈，毕竟是leetcode上刷的第三道，也是比较独立解决的</p><p>debug真的越来越体会到他的实用性，在我盯着代码死死看不出问题的时候，也许一个断点就能帮助我很多！</p><p>附上一张图</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202308031645001.png" alt=""></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合2</title>
      <link href="/2023/08/03/LearnJava3/"/>
      <url>/2023/08/03/LearnJava3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Map基本操作,Map的遍历操作,Map的equals和hashCode重写,Key的重要性（需要被重写equals和hashCode），TreeMap<br>以及compare的复习，Set</p><span id="more"></span><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="Map基本操作"><a href="#Map基本操作" class="headerlink" title="Map基本操作"></a>Map基本操作</h2><p><strong>Stu类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.grade = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrade</span><span class="params">(<span class="type">int</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//根据学生姓名查询学生并获得成绩</span></span><br><span class="line">        Map&lt;String,Stu&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;Alan&quot;</span>,<span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;Alan&quot;</span>,<span class="number">99</span>));</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu1</span> <span class="operator">=</span> map.get(<span class="string">&quot;Alan&quot;</span>);</span><br><span class="line">        System.out.println(stu1.getGrade());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Map的遍历操作"><a href="#Map的遍历操作" class="headerlink" title="Map的遍历操作"></a>Map的遍历操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;apple&quot;</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;pear&quot;</span>, <span class="number">456</span>);</span><br><span class="line">        map.put(<span class="string">&quot;banana&quot;</span>, <span class="number">789</span>);</span><br><span class="line">        <span class="comment">//method1(map);</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(Map&lt;String, Integer&gt; map)</span> &#123;</span><br><span class="line">        <span class="comment">//先获取key的集合（set），再去遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试题（廖雪峰老师的教程中）"><a href="#测试题（廖雪峰老师的教程中）" class="headerlink" title="测试题（廖雪峰老师的教程中）"></a>测试题（廖雪峰老师的教程中）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Student&gt; list = List.of(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">78</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">85</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Brush&quot;</span>, <span class="number">66</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Newton&quot;</span>, <span class="number">99</span>));</span><br><span class="line">        <span class="type">var</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Students</span>(list);</span><br><span class="line">        System.out.println(holder.getScore(<span class="string">&quot;Bob&quot;</span>) == <span class="number">78</span> ? <span class="string">&quot;测试成功!&quot;</span> : <span class="string">&quot;测试失败!&quot;</span>);</span><br><span class="line">        System.out.println(holder.getScore(<span class="string">&quot;Alice&quot;</span>) == <span class="number">85</span> ? <span class="string">&quot;测试成功!&quot;</span> : <span class="string">&quot;测试失败!&quot;</span>);</span><br><span class="line">        System.out.println(holder.getScore(<span class="string">&quot;Tom&quot;</span>) == -<span class="number">1</span> ? <span class="string">&quot;测试成功!&quot;</span> : <span class="string">&quot;测试失败!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Students</span> &#123;</span><br><span class="line">    List&lt;Student&gt; list;</span><br><span class="line">    Map&lt;String, Integer&gt; cache;</span><br><span class="line"></span><br><span class="line">    Students(List&lt;Student&gt; list) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据name查找score，找到返回score，未找到返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getScore</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">// 先在Map中查找:</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">score</span> <span class="operator">=</span> <span class="built_in">this</span>.cache.get(name);</span><br><span class="line">        <span class="keyword">if</span> (score == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">            <span class="comment">//Find in the list</span></span><br><span class="line">            score = findInList(name);</span><br><span class="line">            <span class="keyword">if</span>(score != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//在list中查找到但是map中无缓存</span></span><br><span class="line">                cache.put(name,score);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> score == <span class="literal">null</span> ? -<span class="number">1</span> : score.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">findInList</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> ss : <span class="built_in">this</span>.list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ss.name.equals(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ss.score;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    Student(String name, <span class="type">int</span> score) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Map的equals和hashCode重写"><a href="#Map的equals和hashCode重写" class="headerlink" title="Map的equals和hashCode重写"></a>Map的equals和hashCode重写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Light</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Light</span><span class="params">(String id, <span class="type">int</span> price, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写equals方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Light light) &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(light.color, <span class="built_in">this</span>.color) &amp;&amp; Objects.equals(light.id, <span class="built_in">this</span>.id) &amp;&amp; light.id == <span class="built_in">this</span>.id;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>(<span class="string">&quot;类型不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写hashcode</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(<span class="built_in">this</span>.color,<span class="built_in">this</span>.id,<span class="built_in">this</span>.price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       Map&lt;Light,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="keyword">new</span> <span class="title class_">Light</span>(<span class="string">&quot;1&quot;</span>,<span class="number">23</span>,<span class="string">&quot;blue&quot;</span>),<span class="number">1</span>);</span><br><span class="line">        System.out.println(map.get(<span class="keyword">new</span> <span class="title class_">Light</span>(<span class="string">&quot;1&quot;</span>, <span class="number">23</span>, <span class="string">&quot;blue&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hashmap中依据key的hash值来确定value存储位置，所以一定要重写hashCode方法，而重写equals方法，是为了解决hash冲突，如果两个key的hash值相同，就会调用equals方法，比较key值是否相同，在存储时：如果equals结果相同就覆盖更新value值，如果不同就用List他们都存储起来。在取出来是：如果equals结果相同就返回当前value值，如果不同就遍历List中下一个元素。即要key与hash同时匹配才会认为是同一个key。</p><p>JDK中源码:if(e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))){ops;}</p><hr><p>上面的解释是来自评论区的一个同志的总结，我认为很不错，为什么要重写equals和hashCode，这是因为哈希冲突的存在，当我们的key值不同时，比如a，b，但是在计算哈希值的时候产生了重复，就导致了两个key都映射到了同一个value，但是实际上我们访问value的时候发现并没有冲突，这是因为这个value存储了一个集合，这个集合存储类型是一个键值对，这样子的话，哪怕冲突了，我也可以先遍历这个value存储的集合，然后查找到你本次访问我用的key，然后返回对应的value中的value</p><p>这个同志还解释了存储的时候的问题，比如我用相同的key值存储到同一个value的地方，然后检查后发现你的key是一样的，那我就在这里直接把你的新value覆盖掉旧的value，如果你传入的key不一样，那我就为你添加到集合里面</p><hr><h3 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h3><p>这里还学习到了以枚举类型为key的map，暂时先放着以后用到再去体会</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEnumMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;DayOfWeek, String&gt; map = <span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;&gt;(DayOfWeek.class);</span><br><span class="line">        map.put(DayOfWeek.MONDAY, <span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.TUESDAY, <span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.WEDNESDAY, <span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.THURSDAY, <span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.FRIDAY, <span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.SATURDAY, <span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.SUNDAY, <span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(map.get(DayOfWeek.MONDAY));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>以及compare的复习  </p><p>假装已经有一个javabean类（Person）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;Person,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1.getAge() == o2.getAge()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAge() &gt; o2.getAge() ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">87</span>,<span class="string">&quot;Mike&quot;</span>),<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">45</span>,<span class="string">&quot;Bob&quot;</span>),<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">99</span>,<span class="string">&quot;AWL&quot;</span>),<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Person p : map.keySet()) &#123;</span><br><span class="line">            System.out.println(map.get(p));<span class="comment">// 3,1,2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我想复习一下compare的用法，这里用了匿名内部类，里面重写compare方法，一般来说应该是前者大于后者返回1，这样子实现一个默认的升序，这里想实现降序的话就把-1放到前面，实现一个降序，也就是高的在前</p><hr><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><h2 id="HashSet-amp-TreeSet"><a href="#HashSet-amp-TreeSet" class="headerlink" title="HashSet&amp;TreeSet"></a>HashSet&amp;TreeSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; stringSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        stringSet.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        stringSet.add(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        stringSet.add(<span class="string">&quot;grape&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String str : stringSet) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HashSet和TreeSet其实就可以类比HashMap和TreeMap，底层就是用这两个map类实现的</p><hr><h3 id="Solution-用set去重"><a href="#Solution-用set去重" class="headerlink" title="Solution(用set去重)"></a>Solution(用set去重)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.rd3.demo5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Message&gt; received = List.of(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">1</span>, <span class="string">&quot;Hello!&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">2</span>, <span class="string">&quot;发工资了吗？&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">2</span>, <span class="string">&quot;发工资了吗？&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">3</span>, <span class="string">&quot;去哪吃饭？&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">3</span>, <span class="string">&quot;去哪吃饭？&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">4</span>, <span class="string">&quot;Bye&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        List&lt;Message&gt; displayMessages = process(received);</span><br><span class="line">        <span class="keyword">for</span> (Message message : displayMessages) &#123;</span><br><span class="line">            System.out.println(message.text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> List&lt;Message&gt; <span class="title function_">process</span><span class="params">(List&lt;Message&gt; received)</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 按sequence去除重复消息</span></span><br><span class="line">        Set&lt;Message&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Message&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Message m1, Message m2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (m1.sequence == m2.sequence) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> m1.sequence &gt; m2.sequence ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        set.addAll(received);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Message&gt;(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> sequence;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message</span><span class="params">(<span class="type">int</span> sequence, String text)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sequence = sequence;</span><br><span class="line">        <span class="built_in">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Map </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合1</title>
      <link href="/2023/08/02/LearnJava2/"/>
      <url>/2023/08/02/LearnJava2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>集合</p><span id="more"></span><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><hr><p>List<br>ArrayList<br>LinkedList<br>List.of()<br>迭代器遍历</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.nd2.demo1._1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//创建List并使用List.of(),用迭代器遍历</span></span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//阅读源码发现，在元素数量为10之前它都有分别的方法，超过10之后方法统一</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;String&gt; it = list.iterator() ; it.hasNext() ; ) &#123;</span><br><span class="line">            System.out.println(it.next());<span class="comment">//相当于获取完next之后，直接下一个next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种直接使用for each</span></span><br><span class="line">        <span class="keyword">for</span>(String str : list) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="List和Array的转化"><a href="#List和Array的转化" class="headerlink" title="List和Array的转化"></a>List和Array的转化</h3><h4 id="List-to-Arrat"><a href="#List-to-Arrat" class="headerlink" title="List to Arrat"></a>List to Arrat</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.nd2.demo1._2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//把List转化成Array</span></span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;grape&quot;</span>);</span><br><span class="line">        method1(list);</span><br><span class="line">        method2(list);</span><br><span class="line">        method3(list);</span><br><span class="line">        <span class="comment">//Object[] array = list.toArray(Integer[]::new);</span></span><br><span class="line">        <span class="comment">//上面的看不懂，函数式写法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//传入刚好的大小</span></span><br><span class="line">        String[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">        <span class="keyword">for</span> (String str : array) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//传入相同存储相同类型的Array，如果不够则扩容，如果超过则多余的填为null</span></span><br><span class="line">        list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//利用toArray返回Object数组</span></span><br><span class="line">        Object[] array = list.toArray();</span><br><span class="line">        <span class="keyword">for</span>(Object o : array) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Array-to-List"><a href="#Array-to-List" class="headerlink" title="Array to List"></a>Array to List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.nd2.demo1._2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayToList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用List.of(),传入对应的Array</span></span><br><span class="line">        Integer[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; list = List.of(nums);</span><br><span class="line">        <span class="comment">//JDK11前</span></span><br><span class="line">        List&lt;Integer&gt; list1 = Arrays.asList(nums);</span><br><span class="line">        <span class="comment">//由于返回的是List，而不是实现类ArrayList或者LinkedList所以无法进行修改</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list.add(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedOperationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Solution-找出从start到end的缺失的数字并返回"><a href="#Solution-找出从start到end的缺失的数字并返回" class="headerlink" title="Solution(找出从start到end的缺失的数字并返回)"></a>Solution(<em>找出从<strong>start</strong>到<strong>end</strong>的缺失的数字并返回</em>)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.date.August2023.nd2.demo1._3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造从start到end的序列：</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 洗牌算法suffle可以随机交换List中的元素位置:</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        <span class="comment">// 随机删除List中的一个元素:</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removed</span> <span class="operator">=</span> list.remove((<span class="type">int</span>) (Math.random() * list.size()));</span><br><span class="line">        <span class="type">int</span> <span class="variable">found</span> <span class="operator">=</span> findMissingNumber(start, end, list);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;missing number: &quot;</span> + found);</span><br><span class="line">        System.out.println(removed == found ? <span class="string">&quot;测试成功&quot;</span> : <span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">TODO:</span> 找出从start到end的缺失的数字并返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findMissingNumber</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preSum</span> <span class="operator">=</span> <span class="number">165</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> preSum - sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
            <tag> List </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型</title>
      <link href="/2023/08/02/LearnJava1/"/>
      <url>/2023/08/02/LearnJava1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>泛型，擦拭法，extends和super通配符</p><span id="more"></span><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="上界通配符（-lt-extends-Number-gt"><a href="#上界通配符（-lt-extends-Number-gt" class="headerlink" title="上界通配符（ &lt;? extends Number&gt; )"></a>上界通配符（ &lt;? extends Number&gt; )</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PairHelper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(Pair&lt;? extends Number&gt; p)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">first</span> <span class="operator">=</span> p.getFirst();</span><br><span class="line">        <span class="type">Number</span> <span class="variable">end</span> <span class="operator">=</span> p.getEnd();</span><br><span class="line">        <span class="keyword">return</span> first.intValue() + end.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">addAfterSet</span><span class="params">(Pair&lt;? extends Number&gt; p)</span> &#123;</span><br><span class="line">        <span class="comment">//由于通配符的存在，p可以指定为任意的Number的子类，但我们的p只能是一个子类T比如Integer，如果说的T是Double或其他子类</span></span><br><span class="line">        <span class="comment">//我在处理T的set的时候，就会把Double或者其他子类set给我的Integer，这样明显是不符合规矩的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为我这里可以接受Number本身及其所有子类，当我去设置的时候，我无法保证我设置的是Integer还是Double</span></span><br><span class="line">        <span class="comment">//因为这两个子类相当于是同级的，他们的父类都是Number，虽然都能接受并且获取（因为使用父类引用所以都能获取）</span></span><br><span class="line">        <span class="comment">//p.setFirst(new Integer(p.getFirst().intValue() + 100));</span></span><br><span class="line">        <span class="comment">//p.setEnd(new Integer(p.getEnd().intValue() + 100));</span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">first</span> <span class="operator">=</span> p.getFirst();</span><br><span class="line">        <span class="type">Number</span> <span class="variable">end</span> <span class="operator">=</span> p.getEnd();</span><br><span class="line">        <span class="keyword">return</span> first.intValue() + end.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="super通配符-lt-super-Integer-gt"><a href="#super通配符-lt-super-Integer-gt" class="headerlink" title="super通配符 (&lt; ? super Integer&gt;)"></a>super通配符 (&lt; ? super Integer&gt;)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperPair</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(Pair&lt;? <span class="built_in">super</span> Integer&gt; p, Integer first, Integer end)</span> &#123;</span><br><span class="line">        p.setFirst(first);</span><br><span class="line">        p.setEnd(end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(Pair&lt;? <span class="built_in">super</span> Integer&gt; pair)</span> &#123;</span><br><span class="line">        <span class="comment">//由于我的add方法接受了Integer本身及其父类，如果说我传入了Number类，然后在下面获取了first或者end</span></span><br><span class="line">        <span class="comment">//那么就相当于把Number向下转成Integer，这是不合理的</span></span><br><span class="line">        <span class="comment">//Integer first = pair.getFirst();</span></span><br><span class="line">        <span class="comment">//Integer end = pair.getEnd();</span></span><br><span class="line">        <span class="comment">//return first + end;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>extends 和 super的区分方法就是 前者他可以获取当前类（就是extends 后面的类）的本类型及其子类，这样子的话，我在方法里都用父类引用去接收，可以实现泛型的效果，也不会出现类型无法转换，但是这样就带来了无法修改的问题，由于本类和子类的类型都可以被父类引用去接收，所以导致了后续可能会出现不同类进行相互操作，这样是不合理的</p><p>再看super通配符，相当于是设定了一个下界，传入的类都有一个子类是Integer（比如），这样子的话，用可以对可传入的类型（比如Object，Number）进行修改set，即传入Integer（然后就是父类引用接收子类类型），但是却不能get，也就是只能写不能读，因为如果我要读取，然后用子类型去接收，相当于是用子类引用接收父类类型，这是不允许的。</p><p>整体上就是为了实现父类引用接收子类类型</p><p>extends可以get，因为他用父类去接收本类及子类，符合原则，但是他不能set，因为可以接收子类，但是子类之间是平级的，要避免这样的问题</p><p>super可以set，因为我接收子类本类及其父类，然后把子类的值赋给他们，符合原则，但是不能get，因为get的话，相当于用子类引用去get可能出现的父类型。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode热题:字母异位词分组</title>
      <link href="/2023/07/30/Leetcode2/"/>
      <url>/2023/07/30/Leetcode2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下学习算法的过程</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.leetcode.July.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="comment">//用于储存质数和以及对应的单词</span></span><br><span class="line">        Map&lt;Double, List&lt;String&gt;&gt; stringMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//用于储存生成的质数的结果(不重复)</span></span><br><span class="line">        Set&lt;Double&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//以下是生成对应质数的字母表</span></span><br><span class="line">        <span class="type">int</span>[] PRIMES = &#123;</span><br><span class="line">                <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>,</span><br><span class="line">                <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span></span><br><span class="line">        &#125;;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> <span class="variable">currentChar</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> prime : PRIMES) &#123;</span><br><span class="line">            map.put(currentChar, prime);</span><br><span class="line">            currentChar++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始遍历strs</span></span><br><span class="line">        <span class="keyword">for</span> (String word : strs) &#123;</span><br><span class="line">            <span class="type">char</span>[] charArray = word.toCharArray();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isFirst</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//拆解字符，计算质数积</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> ch : charArray) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isFirst) &#123;</span><br><span class="line">                    val = map.get(ch);</span><br><span class="line">                    isFirst = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    val *= map.get(ch);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//记录质数积</span></span><br><span class="line">            set.add(val);</span><br><span class="line">            <span class="comment">//如果要实现一个key对应多个value，必须要将相同的value存入到集合中，如何判断质数和相同的集合是否存在？</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加到对应的哈希表中,创建相同key值对应的list，再把list拿出来对应添加</span></span><br><span class="line">            <span class="comment">//首先要判断是否存在对应key值的list</span></span><br><span class="line">            <span class="keyword">if</span> (stringMap.containsKey(val)) &#123;</span><br><span class="line">                <span class="comment">//存在，拿出对应的list添加</span></span><br><span class="line">                stringMap.get(val).add(word);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不存在，先添加再拿出list添加</span></span><br><span class="line">                stringMap.put(val, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">                stringMap.get(val).add(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据set集合内的key值，分别输出</span></span><br><span class="line">        <span class="comment">//最终输出</span></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">double</span> key : set) &#123;</span><br><span class="line">            list.add(stringMap.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (List&lt;List&lt;String&gt;&gt;) list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>先前一直在看算法入门书，感觉到有点乏力之后想来尝试一下leetcode的题目，果然对我是有难度的，这道题目我相当于是借鉴了一个思路，就是将每一个字母对应一个素数，这样子单词拆解之后对应字母的乘积就应该是唯一的，然后我就去写，刚开始对数据结构只是纸面上的了解，顶多就是自己手写过基本功能，这个熟练度导致我在写这种题目的时候对于很多的内置方法是很陌生的，所以我一边写一边问gpt，然后去网上查资料才拼凑出这个能过的解法（之所以说能过是因为空间复杂度被完爆，而且时间复杂度也没好到哪里去，现在至少解出来题目了还有点欣慰）。然后遇到了问题也蛮多，代码里的注释也有，就是一个key对应多个value的情况，在问过gpt后他说可以引入一个第三方库里面有MultiValueMap这个类，我寻思着这没必要于是采取了另一种方法，就是key值代表质数积，然后value是对应的唯一存在的list，然后list再去存储单词，这样的话就需要很多的map，而且我还用了set集合（可以存储不重复的key）值来保存这些质数积，在最后的时候遍历set，然后根据set里面的key值去查找对应的list，再把list遍历。</p><p>整体下来是能符合要求的，对于我这种小白，除了借鉴了质数和避免重复这个思路外，其余的思路都是比较自然的，所以我现在对自己的要求也只是能实现即可（但不能以答案为导向或者是那种…你懂的，就是代码超长…)，路漫漫其修远兮～～～</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode热题:两数之和</title>
      <link href="/2023/07/30/Leetcode1/"/>
      <url>/2023/07/30/Leetcode1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下学习算法的过程</p><span id="more"></span><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p>两个for循环的解法实在是根深蒂固了，拿到就想用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.leetcode.July.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] == remain) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解法2（参考）"><a href="#解法2（参考）" class="headerlink" title="解法2（参考）"></a>解法2（参考）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.leetcode.July.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(remain)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(remain), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;没有匹配的数字&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一次用哈希表解题，这个解法真的优化了时间复杂度,比我之前只用c好多了哈哈哈</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆的数据结构与算法</title>
      <link href="/2023/07/29/LearnAlgorithm2/"/>
      <url>/2023/07/29/LearnAlgorithm2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下学习算法和数据结构的过程（堆）</p><p>本博客参考<strong><a href="https://www.hello-algo.com/chapter_tree/">《Hello算法》</a></strong></p><span id="more"></span><h1 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h1><hr><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307291729846.png" alt=""></p><h2 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h2><p>学习堆的时候，我自己写了一个类（MyHeap），内部由一个ArrayList维护，主要实现入堆和堆顶元素出堆的操作</p><p>后面还有一个相关的TOP-K问题</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>堆有很多有意思的地方，就是内部用数组实现的时候，可以考虑进行下标的索引来对外实现为堆（或完全二叉树）</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230729172830.png" alt=""></p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307291731572.png" alt=""></p><hr><h2 id="难点1-入堆"><a href="#难点1-入堆" class="headerlink" title="难点1:入堆"></a>难点1:入堆</h2><p>为了维护堆的性质，也就是任意的根节点都要大于其子树的元素</p><p>所以入堆的时候就要考虑进行重新整合，也就是堆化操作（heapify）</p><p><strong>MyHeap类（相关代码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.heapdemo.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHeap</span> &#123;</span><br><span class="line">    <span class="comment">//内部维护一个ArrayList，对外表现为堆</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; heap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHeap</span><span class="params">()</span> &#123;</span><br><span class="line">        heap = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据传入的列表进行堆的初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHeap</span><span class="params">(List&lt;Integer&gt; array)</span> &#123;</span><br><span class="line">        heap = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断堆是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取堆大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取堆顶元素（内部实现即为获取0索引元素）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> heap.get(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Empty!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建映射（获取传入节点的左，右，父节点索引)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLeft</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRight</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPre</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (i - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//元素入堆操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//先将元素置于内部队列的尾部（即直接add）</span></span><br><span class="line">        heap.add(val);</span><br><span class="line">        <span class="comment">//加入元素后，可能会不符合堆的性质，要进行堆化(Heapify)</span></span><br><span class="line">        pushHeapify(size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pushHeapify</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//从队尾开始，即下标为（size-1）处开始</span></span><br><span class="line">            <span class="comment">//获取父节点下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> getPre(i);</span><br><span class="line">            <span class="comment">//如果父节点下标&lt;0，则代表堆化完成，如果&gt;=0，进行比较</span></span><br><span class="line">            <span class="keyword">if</span> (pre &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;堆化完成&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//获取父节点与当前节点value</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">preVal</span> <span class="operator">=</span> heap.get(pre);</span><br><span class="line">                <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> heap.get(i);</span><br><span class="line">                <span class="comment">//与父节点进行比较，如果比父节点小或等于父节点，堆化完成，否则交换值</span></span><br><span class="line">                <span class="keyword">if</span> (preVal &gt;= val) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;堆化完成&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//交换值(注意这里要用下标设置，否则只交换值没有用，对应位置的值还是没变的）</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> preVal;</span><br><span class="line">                    heap.set(pre, val);</span><br><span class="line">                    heap.set(i, temp);</span><br><span class="line">                    i = pre;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="难点2-堆顶元素出堆"><a href="#难点2-堆顶元素出堆" class="headerlink" title="难点2:堆顶元素出堆"></a>难点2:堆顶元素出堆</h2><h3 id="巧妙处理"><a href="#巧妙处理" class="headerlink" title="巧妙处理"></a>巧妙处理</h3><p>利用先交换堆顶和堆尾元素，巧妙的避免了直接删除堆顶元素再堆化对堆的破坏性</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307291732179.png" alt=""></p><p><strong>MyHeap类（相关代码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//堆顶元素出列(采取先交换后堆化的操作)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;元素为空&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//先交换堆顶元素和堆底元素的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Swap!&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> heap.get(<span class="number">0</span>);</span><br><span class="line">        heap.set(<span class="number">0</span>, heap.get(size() - <span class="number">1</span>));</span><br><span class="line">        heap.set(size() - <span class="number">1</span>, tmp);</span><br><span class="line">        <span class="comment">//删除堆底元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Delete!&quot;</span>);</span><br><span class="line">        heap.remove(size() - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//堆化操作</span></span><br><span class="line">        popHeapify(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">popHeapify</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//第一次进入下标为0</span></span><br><span class="line">        <span class="comment">//创建临时变量用于保存左右下标</span></span><br><span class="line">        <span class="type">int</span> l,r;</span><br><span class="line">        l = getLeft(i);</span><br><span class="line">        r = getRight(i);</span><br><span class="line">        <span class="keyword">if</span>(heap.get(l) &gt; heap.get(i) &amp;&amp; heap.get(l) &gt;= heap.get(r)) &#123;</span><br><span class="line">            <span class="comment">//交换左节点和父节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> heap.get(l);</span><br><span class="line">            heap.set(l,heap.get(i));</span><br><span class="line">            heap.set(i,tmp);</span><br><span class="line">            i = l;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(heap.get(r) &gt; heap.get(i) &amp;&amp; heap.get(r) &gt;= heap.get(l)) &#123;</span><br><span class="line">            <span class="comment">//交换右节点和父节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> heap.get(r);</span><br><span class="line">            heap.set(r,heap.get(i));</span><br><span class="line">            heap.set(i,tmp);</span><br><span class="line">            i = r;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;堆化完成&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><strong>MyHeap类（相关代码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从堆顶开始遍历（测试用）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printHeap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : getHeap()) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">getHeap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> heap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入堆"><a href="#入堆" class="headerlink" title="入堆"></a>入堆</h3><p><strong>Test类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        Integer[] init = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(init));</span><br><span class="line">        <span class="type">MyHeap</span> <span class="variable">heap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyHeap</span>(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始状态&quot;</span>);</span><br><span class="line">        heap.printHeap();</span><br><span class="line">        System.out.println(<span class="string">&quot;入堆&quot;</span>);</span><br><span class="line">        heap.push(<span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;入堆后&quot;</span>);</span><br><span class="line">        heap.printHeap();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h4><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307291742824.png" alt=""></p><h4 id="入堆后"><a href="#入堆后" class="headerlink" title="入堆后"></a>入堆后</h4><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307291742824.png" alt=""></p><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始状态</span><br><span class="line">9 8 6 6 7 5 2 1 4 3 6 2 入堆</span><br><span class="line">堆化完成</span><br><span class="line">入堆后</span><br><span class="line">9 8 7 6 7 6 2 1 4 3 6 2 5 </span><br></pre></td></tr></table></figure><hr><h3 id="出堆"><a href="#出堆" class="headerlink" title="出堆"></a>出堆</h3><p><strong>MyHeap类（相关代码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从堆顶开始遍历（测试用）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printHeap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : getHeap()) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">getHeap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> heap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.heapdemo.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化，注意使用Integer包装类，并且使用Arrays的静态方法转换成List传入</span></span><br><span class="line">        Integer[] init2 = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(init2));</span><br><span class="line">        <span class="type">MyHeap</span> <span class="variable">heap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyHeap</span>(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始状态&quot;</span>);</span><br><span class="line">        heap.printHeap();</span><br><span class="line">        System.out.println(<span class="string">&quot;出堆&quot;</span>);</span><br><span class="line">        heap.pop();</span><br><span class="line">        System.out.println(<span class="string">&quot;出堆后&quot;</span>);</span><br><span class="line">        heap.printHeap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="初始状态-1"><a href="#初始状态-1" class="headerlink" title="初始状态"></a>初始状态</h4><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307291745616.png" alt=""></p><h4 id="出堆后"><a href="#出堆后" class="headerlink" title="出堆后"></a>出堆后</h4><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307291745616.png" alt=""></p><h4 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">初始状态</span><br><span class="line">9 8 7 6 7 6 2 1 4 3 6 2 5 出堆</span><br><span class="line">Swap!</span><br><span class="line">Delete!</span><br><span class="line">堆化完成</span><br><span class="line">出堆后</span><br><span class="line">8 6 7 5 7 6 2 1 4 3 6 2</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的数据结构与算法</title>
      <link href="/2023/06/30/LearnAlgorithm1/"/>
      <url>/2023/06/30/LearnAlgorithm1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下学习算法和数据结构的过程（树）</p><p>本博客参考<strong><a href="https://www.hello-algo.com/chapter_tree/">《Hello算法》</a></strong></p><span id="more"></span><h1 id="二叉树🌳"><a href="#二叉树🌳" class="headerlink" title="二叉树🌳"></a>二叉树🌳</h1><h2 id="1-概念学习"><a href="#1-概念学习" class="headerlink" title="1.概念学习"></a>1.概念学习</h2><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230630111354.png" alt=""></p><h3 id="从两种角度去理解二叉树的高度，节点的深度和高度"><a href="#从两种角度去理解二叉树的高度，节点的深度和高度" class="headerlink" title="从两种角度去理解二叉树的高度，节点的深度和高度"></a>从两种角度去理解二叉树的高度，节点的深度和高度</h3><p>从上图来看，这像一颗倒着长的树，那么理解<strong>二叉树的高度</strong>时，就要在脑海里<strong>把这棵树立过来</strong>（从根节点到最远节点）就是树的高度；</p><p>再理解<strong>节点的深度和高度</strong>，就要把这棵树想象成<strong>埋在地里的根</strong>，在比较深度的时候要和地面上的根节点比，在比较高度的时候，要和最深的根去比</p><h2 id="2-二叉树的插入和删除操作"><a href="#2-二叉树的插入和删除操作" class="headerlink" title="2 二叉树的插入和删除操作"></a>2 二叉树的插入和删除操作</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p><strong>TreeNode类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.source.tree.Tree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建节点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> TreeNode left;</span><br><span class="line">    <span class="keyword">private</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="number">0</span>;</span><br><span class="line">        left = <span class="literal">null</span>;</span><br><span class="line">        right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        left = <span class="literal">null</span>;</span><br><span class="line">        right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(TreeNode left)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(TreeNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showInfo1</span><span class="params">(TreeNode treeNode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode.left != <span class="literal">null</span> &amp;&amp; treeNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(treeNode.value + <span class="string">&quot;节点的左节点为：&quot;</span> + treeNode.left.value + <span class="string">&quot; 该节点的右节点为：&quot;</span> + treeNode.right.value);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (treeNode.left != <span class="literal">null</span> &amp;&amp; treeNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(treeNode.value + <span class="string">&quot;节点的左节点为：&quot;</span> + treeNode.left.value + <span class="string">&quot; 该节点的右节点为空 &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (treeNode.left == <span class="literal">null</span> &amp;&amp; treeNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(treeNode.value + <span class="string">&quot;节点的左节点为空&quot;</span> + <span class="string">&quot; 该节点的右节点为:&quot;</span> + treeNode.right.value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(treeNode.value + <span class="string">&quot;节点为叶节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showInfo2</span><span class="params">(TreeNode treeNode)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(treeNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根节点不为空，先打印根节点情况,判断左右节点，按照先左后右顺序打印</span></span><br><span class="line">            TreeNode.showInfo1(treeNode);</span><br><span class="line">           <span class="comment">//利用循环，当碰到叶节点时，停止该分支</span></span><br><span class="line">           <span class="keyword">if</span>(treeNode.left != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//左节点不为空，作为新的根节点</span></span><br><span class="line">               <span class="type">Thread</span> <span class="variable">leftThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                           <span class="meta">@Override</span></span><br><span class="line">                           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                               TreeNode.showInfo2(treeNode.left);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">               );</span><br><span class="line">               leftThread.start();</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span>(treeNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//左节点不为空，作为新的根节点</span></span><br><span class="line">                <span class="type">Thread</span> <span class="variable">rightThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                                TreeNode.showInfo2(treeNode.right);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                );</span><br><span class="line">                rightThread.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLeaf</span><span class="params">(TreeNode treeNode)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(treeNode.left == <span class="literal">null</span> &amp;&amp; treeNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> (TreeNode) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value &gt; treeNode.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.value &lt; treeNode.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我用了两个showInfo，第一个比较单纯，没有考虑到如何正确遍历树，后面一个我用了多线程和一个循环结构，配合第一个方法可以打印出正确的树的结构，不过后期应该有更好的遍历方法，这里只是我自己的写法</p><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//建立联系</span></span><br><span class="line">        treeNode1.setLeft(treeNode2);</span><br><span class="line">        treeNode1.setRight(treeNode3);</span><br><span class="line">        treeNode2.setLeft(treeNode4);</span><br><span class="line">        treeNode3.setRight(treeNode5);</span><br><span class="line">        <span class="comment">//创建集合存储节点</span></span><br><span class="line">        ArrayList&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(treeNode1);</span><br><span class="line">        list.add(treeNode2);</span><br><span class="line">        list.add(treeNode3);</span><br><span class="line">        list.add(treeNode4);</span><br><span class="line">        list.add(treeNode5);</span><br><span class="line"><span class="comment">//        for (TreeNode treeNode : list) &#123;</span></span><br><span class="line"><span class="comment">//            TreeNode.showInfo1(treeNode);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//TreeNode.showInfo2(treeNode1);</span></span><br><span class="line"></span><br><span class="line">        exert(treeNode1, treeNode2, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exert</span><span class="params">(TreeNode treeNode1, TreeNode treeNode2, ArrayList&lt;TreeNode&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//测试插入节点</span></span><br><span class="line">        <span class="comment">//二节点的左节点插入6节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>);</span><br><span class="line">        list.add(treeNode6);</span><br><span class="line">        treeNode1.setLeft(treeNode6);</span><br><span class="line">        treeNode6.setLeft(treeNode2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;插入6节点后&quot;</span> + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">        TreeNode.showInfo2(treeNode1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打印结果"><a href="#打印结果" class="headerlink" title="打印结果"></a>打印结果</h3><hr><p>1节点的左节点为：2 该节点的右节点为：3<br>2节点的左节点为：4 该节点的右节点为空<br>3节点的左节点为空 该节点的右节点为:5<br>4节点为叶节点<br>5节点为叶节点</p><hr><h4 id="插入6节点后"><a href="#插入6节点后" class="headerlink" title="插入6节点后"></a>插入6节点后</h4><p>1节点的左节点为：6 该节点的右节点为：3<br>3节点的左节点为空 该节点的右节点为:5<br>6节点的左节点为：2 该节点的右节点为空<br>2节点的左节点为：4 该节点的右节点为空<br>4节点为叶节点<br>5节点为叶节点</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/%EF%BC%88%E6%A0%91%EF%BC%89%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9.jpg" alt=""></p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>这个比较简单，只需要直接把2节点作为1节点的左节点，6就相当于被删除了～</p><h2 id="二叉树的遍历（广度遍历与深度遍历）"><a href="#二叉树的遍历（广度遍历与深度遍历）" class="headerlink" title="二叉树的遍历（广度遍历与深度遍历）"></a>二叉树的遍历（<strong>广度遍历与深度遍历</strong>）</h2><h3 id="层序遍历法（广度遍历优先）"><a href="#层序遍历法（广度遍历优先）" class="headerlink" title="层序遍历法（广度遍历优先）"></a>层序遍历法（广度遍历优先）</h3><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230716161656.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo2;</span><br><span class="line"><span class="keyword">import</span> main.java.learn.theme.treedemo.demo1.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//建立联系</span></span><br><span class="line">        treeNode1.setLeft(treeNode2);</span><br><span class="line">        treeNode1.setRight(treeNode3);</span><br><span class="line">        treeNode2.setLeft(treeNode4);</span><br><span class="line">        treeNode3.setRight(treeNode5);</span><br><span class="line">        <span class="comment">//------//</span></span><br><span class="line">        List&lt;Integer&gt; result = method1(treeNode1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : result) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">method1</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//层序遍历法，遍历的同时获取节点值</span></span><br><span class="line">        <span class="comment">//用queue存储每个节点(FIFO)</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="comment">//创建一个List存储每个节点值</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//循环判断是否为空</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//非空，队首出列（第一次就是根节点）</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            list.add(node.getValue());</span><br><span class="line">            <span class="comment">//分别判断左右节点(利用queue FIFO的特性，保证遍历顺序)</span></span><br><span class="line">            <span class="keyword">if</span>(node.getLeft() != <span class="literal">null</span> ) &#123;</span><br><span class="line">                queue.add(node.getLeft());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.getRight() != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(node.getRight());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在每一次遍历的时候都会记录当前传入节点的值，并且如果有左右节点，都会按照顺序入队，循环结束证明所有的节点都已经遍历完毕了</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>打印结果</strong></p><p>1<br>2<br>3<br>4<br>5</p><hr><h3 id="前序，后序，中序遍历法-深度遍历优先"><a href="#前序，后序，中序遍历法-深度遍历优先" class="headerlink" title="前序，后序，中序遍历法(深度遍历优先)"></a>前序，后序，中序遍历法(深度遍历优先)</h3><p><strong>先来看看我和gpt的一些问答</strong></p><p><strong>Q1:</strong>前序，中序，后序遍历是什么，为我详细解答一下</p><p><strong>A1:</strong> 前序遍历、中序遍历和后序遍历是二叉树遍历的三种常见方式，用于按照特定顺序访问二叉树中的节点。</p><ol><li><p>前序遍历（Preorder Traversal）：<br>前序遍历先访问根节点，然后按照先左后右的顺序递归地遍历左子树和右子树。即根节点 -&gt; 左子树 -&gt; 右子树。</p></li><li><p>中序遍历（Inorder Traversal）：<br>中序遍历先递归地遍历左子树，然后访问根节点，最后递归地遍历右子树。即左子树 -&gt; 根节点 -&gt; 右子树。</p></li><li><p>后序遍历（Postorder Traversal）：<br>后序遍历先递归地遍历左子树，然后递归地遍历右子树，最后访问根节点。即左子树 -&gt; 右子树 -&gt; 根节点。</p></li></ol><p>这三种遍历方式都是通过递归或栈的辅助实现的。它们可以用来处理二叉树的节点，进行节点值的访问、打印、复制等操作。</p><p>需要注意的是，每种遍历方式在访问节点的顺序和操作时机上有所区别，因此选择适当的遍历方式取决于具体的需求和问题。例如，前序遍历适用于创建二叉树的复制、打印树的结构等；中序遍历适用于搜索树中的节点或按节点值的大小进行排序；后序遍历适用于释放二叉树的内存等操作。</p><p>对于一个给定的二叉树，可以根据需求选择合适的遍历方式来处理树的节点。</p><hr><p><strong>Q2:</strong> 这些顺序的命名由遍历根的顺序决定吗？ </p><p><strong>A2:</strong> 是的，这些遍历方式的命名是根据<strong>根节点的访问顺序</strong>来命名的。</p><ul><li>前序遍历：”前”指的是根节点的访问顺序位于左子树和右子树之前。</li><li>中序遍历：”中”指的是根节点的访问顺序位于左子树和右子树之间。</li><li>后序遍历：”后”指的是根节点的访问顺序位于左子树和右子树之后。</li></ul><p>这样的命名方式有助于描述节点的访问顺序，并且在讨论二叉树遍历时能够更清晰地表达所采用的遍历策略。</p><hr><p><strong>Q3:</strong>不太理解这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 前序遍历 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树</span></span><br><span class="line">    list.add(root.val);</span><br><span class="line">    preOrder(root.left);</span><br><span class="line">    preOrder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A3:</strong>  这段代码实现了二叉树的前序遍历算法。让我逐步解释它的工作原理：</p><ol><li>首先，我们判断根节点是否为空，如果为空，则直接返回。</li><li>如果根节点不为空，我们首先访问当前节点（即将当前节点的值添加到列表中）。</li><li>然后，递归地对左子树进行前序遍历，即调用 <code>preOrder(root.left)</code>。</li><li>接着，递归地对右子树进行前序遍历，即调用 <code>preOrder(root.right)</code>。</li></ol><p>这个过程可以形象地描述为”根节点 -&gt; 左子树 -&gt; 右子树”的访问顺序。每个节点的访问顺序是先访问根节点，然后递归地按照前序遍历顺序访问左子树和右子树。</p><p>通过递归调用，我们可以遍历整棵二叉树，并将节点的值按前序遍历的顺序添加到列表中。</p><hr><p><strong>Q4:</strong>  这里的递归，相当于把左右节点当成一个新的根，左右子树看成新的树，再先遍历根，直到最后传入的左右节点为空为止是吗</p><p><strong>A4:</strong> 正解！在前序遍历算法中，我们首先访问当前节点，然后递归地对左子树和右子树进行前序遍历。每次递归调用时，左子节点和右子节点都被视为新的根节点，然后继续按照前序遍历的方式遍历它们的左右子树。这个过程会一直进行下去，直到遇到空节点为止，然后回溯到上一层继续遍历其他子树。</p><p>可以将递归过程看作是对每个子树的遍历，每个子树的根节点会作为新的起点进行遍历。递归调用的结束条件是遇到空节点，表示已经遍历完该子树。</p><p>通过不断地将左右子节点作为新的根节点进行遍历，我们可以遍历整棵二叉树的所有节点，并按照前序遍历的顺序访问它们。</p><hr><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> main.java.learn.theme.treedemo.demo1.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">7</span>);</span><br><span class="line">        treeNode1.setLeft(treeNode2);</span><br><span class="line">        treeNode1.setRight(treeNode3);</span><br><span class="line">        treeNode2.setLeft(treeNode4);</span><br><span class="line">        treeNode2.setRight(treeNode5);</span><br><span class="line">        treeNode3.setLeft(treeNode6);</span><br><span class="line">        treeNode3.setRight(treeNode7);</span><br><span class="line">        <span class="comment">//前序遍历法</span></span><br><span class="line">        method1(treeNode1);</span><br><span class="line">        System.out.println(<span class="string">&quot;前序遍历法&quot;</span>);</span><br><span class="line">        printList(list1);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">//中序遍历法</span></span><br><span class="line">        method2(treeNode1);</span><br><span class="line">        System.out.println(<span class="string">&quot;中序遍历法&quot;</span>);</span><br><span class="line">        printList(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">//中序遍历法</span></span><br><span class="line">        method3(treeNode1);</span><br><span class="line">        System.out.println(<span class="string">&quot;后序遍历法&quot;</span>);</span><br><span class="line">        printList(list3);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list1.add(root.getValue());</span><br><span class="line">            method1(root.getLeft());</span><br><span class="line">            method1(root.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method2(root.getLeft());</span><br><span class="line">            list2.add(root.getValue());</span><br><span class="line">            method2(root.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method3(root.getLeft());</span><br><span class="line">            method3(root.getRight());</span><br><span class="line">            list3.add(root.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果打印：</p><p>前序遍历法<br>1-&gt;2-&gt;4-&gt;5-&gt;3-&gt;6-&gt;7-&gt;End</p><p>中序遍历法<br>4-&gt;2-&gt;5-&gt;1-&gt;6-&gt;3-&gt;7-&gt;End</p><p>后序遍历法<br>4-&gt;5-&gt;2-&gt;6-&gt;7-&gt;3-&gt;1-&gt;End</p><hr><h2 id="二叉搜索树（BinarySearchTree"><a href="#二叉搜索树（BinarySearchTree" class="headerlink" title="二叉搜索树（BinarySearchTree)"></a>二叉搜索树（BinarySearchTree)</h2><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230718142502.png" alt=""></p><h3 id="二叉搜索树的构造"><a href="#二叉搜索树的构造" class="headerlink" title="二叉搜索树的构造"></a>二叉搜索树的构造</h3><p><strong>BinarySearchTree类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> main.java.learn.theme.treedemo.demo1.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode root;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinarySearchTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">insertNode</span><span class="params">(TreeNode root, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">//如果二叉树没有生成，传入的第一个值作为根值</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.getValue() &lt; value) &#123;</span><br><span class="line">            <span class="comment">//如果传入的值大于根值，需要进入右节点,递归插入</span></span><br><span class="line">            root.setRight(insertNode(root.getRight(),value));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.getValue() &gt; value) &#123;</span><br><span class="line">            <span class="comment">//同理，递归插入左节点</span></span><br><span class="line">            root.setLeft(insertNode(root.getLeft(),value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> val : nums) &#123;</span><br><span class="line">            root = insertNode(root,val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历法</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            inorderTraversal(root.getLeft());</span><br><span class="line">            list.add(root.getValue());</span><br><span class="line">            inorderTraversal(root.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过递归插入节点，例如当第一次插入节点时，该节点作为根节点，当插入下一个节点时，根据节点大小的比较，对应插入到当前根节点的左/右节点，并且利用递归的思想，将插入的新的节点作为新的根节点，再去进一步判断，这样，只需要知道一个根节点，就能获取到一颗二叉搜索树，并且通过中序遍历法验证，得到一个升序的序列</p><p><strong>通过逐步调试可以发现，这个构造原理就是通过不断的将新插入的值与当前节点值比较，一直向下寻找合适的位置，如果当前“根”节点不为空，那么就要继续向下，判断要插在左还是右，如果此时节点为null，那么就有了属于当前值的位置，插入即可</strong></p><hr><p><strong>Test类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> main.java.learn.theme.treedemo.demo1.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] values = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>&#125;;</span><br><span class="line">        <span class="type">BinarySearchTree</span> <span class="variable">binarySearchTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line">        binarySearchTree.buildTree(arr);</span><br><span class="line">        List&lt;Integer&gt; list = binarySearchTree.inorderTraversal(binarySearchTree.getRoot());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果:</strong></p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 </p><hr><h3 id="二叉搜索树的查找"><a href="#二叉搜索树的查找" class="headerlink" title="二叉搜索树的查找"></a>二叉搜索树的查找</h3><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230722111952.png" alt=""></p><p><strong>代码实现</strong></p><p><strong>Test02</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> main.java.learn.theme.treedemo.demo1.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        <span class="type">BinarySearchTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line">        tree.buildTree(arr);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> tree.getRoot();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">resTreeNode</span> <span class="operator">=</span> search(root, <span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title function_">search</span><span class="params">(TreeNode root, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (root.getValue() == num) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;find num &quot;</span> + root.getValue() + <span class="string">&quot; in level &quot;</span> + count);</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.getValue() &lt; num) &#123;</span><br><span class="line">                    root = root.getRight();</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    root = root.getLeft();</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Root is null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>输出结果</p><p>find num 7 in level 4</p><hr><h3 id="二叉搜索树的删除操作"><a href="#二叉搜索树的删除操作" class="headerlink" title="二叉搜索树的删除操作"></a>二叉搜索树的删除操作</h3><p>删除比较复杂，需要分析所删除的节点的度数，进行分类讨论</p><hr><h4 id="度数为0（叶节点"><a href="#度数为0（叶节点" class="headerlink" title="度数为0（叶节点)"></a>度数为0（叶节点)</h4><p>当度数为0时，只需要通过查找的方法，找到节点，判断是否为叶子，然后根据其位于pre节点的左或右进行删除即可</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307231038366.png" alt=""></p><hr><h4 id="度数为1"><a href="#度数为1" class="headerlink" title="度数为1"></a>度数为1</h4><p>当度数为1时，需要根据左右位置，进行覆盖操作来达到删除效果</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307231136430.png" alt=""></p><hr><h4 id="度数为2时"><a href="#度数为2时" class="headerlink" title="度数为2时"></a>度数为2时</h4><p>度数为2比较复杂，需要保证二叉搜索树，左根右的一个升序，所以在找到删除节点之后要去找到该节点的左子树的右节点，或者该节点右子树的左节点,并且先记录后递归删除，再进行值替换</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/202307231154332.png" alt=""></p><hr><p><strong>整体代码</strong></p><p><strong>Test04</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java.learn.theme.treedemo.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> main.java.learn.theme.treedemo.demo1.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  删除节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> BinarySearchTree.getBuiltTree();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//printTree(root);</span></span><br><span class="line"></span><br><span class="line">        method1(root);</span><br><span class="line">        method2(root);</span><br><span class="line">        method3(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//测试是否能正常删除度数为2的节点</span></span><br><span class="line">        deleteNode(root, <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;delete 4&quot;</span>);</span><br><span class="line">        printTree(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//测试是否能正常删除度数为1的节点</span></span><br><span class="line">        deleteNode(root, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;delete 2&quot;</span>);</span><br><span class="line">        printTree(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//测试是否能正常删除叶节点</span></span><br><span class="line">        deleteNode(root, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;delete 1&quot;</span>);</span><br><span class="line">        printTree(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">preNode</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (root.getValue() == val) &#123;</span><br><span class="line">                    <span class="comment">//当前节点为所删除节点</span></span><br><span class="line">                    <span class="keyword">if</span> (isLeaf(root)) &#123;</span><br><span class="line">                        <span class="comment">//如果是叶节点</span></span><br><span class="line">                        <span class="comment">//根据左右节点,直接删除</span></span><br><span class="line">                        <span class="keyword">if</span> (preNode.getValue() &gt; val) &#123;</span><br><span class="line">                            preNode.setLeft(<span class="literal">null</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preNode.getValue() &lt; val) &#123;</span><br><span class="line">                            preNode.setRight(<span class="literal">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isOneLeaf(root)) &#123;</span><br><span class="line">                        <span class="comment">//节点度数为1</span></span><br><span class="line">                        <span class="comment">//根据左右节点，覆盖</span></span><br><span class="line">                        <span class="keyword">if</span> (preNode.getValue() &gt; val) &#123;</span><br><span class="line">                            <span class="comment">//root在pre的左节点位置</span></span><br><span class="line">                            <span class="comment">//判断左右哪个为null</span></span><br><span class="line">                            <span class="keyword">if</span> (root.getLeft() == <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="comment">//使用右节点</span></span><br><span class="line">                                preNode.setLeft(root.getRight());</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.getRight() == <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="comment">//使用左节点</span></span><br><span class="line">                                preNode.setLeft(root.getLeft());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preNode.getValue() &lt; val) &#123;</span><br><span class="line">                            <span class="comment">//root在pre的右节点</span></span><br><span class="line">                            <span class="keyword">if</span> (root.getLeft() == <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="comment">//使用右节点</span></span><br><span class="line">                                preNode.setRight(root.getRight());</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.getRight() == <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="comment">//使用左节点</span></span><br><span class="line">                                preNode.setRight(root.getLeft());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isTwoLeaf(root)) &#123;</span><br><span class="line">                        <span class="comment">//2度节点，采取右子树左节点替换法</span></span><br><span class="line">                        <span class="comment">//获取右子树左节点</span></span><br><span class="line">                        <span class="type">TreeNode</span> <span class="variable">nex</span> <span class="operator">=</span> root.getRight().getLeft();</span><br><span class="line">                        <span class="comment">//递归删除右子树左节点（不知道是叶还是1度还是2度）</span></span><br><span class="line">                        deleteNode(root, nex.getValue());</span><br><span class="line">                        <span class="comment">//将nex节点替换到root节点</span></span><br><span class="line">                        root.setValue(nex.getValue());</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.getValue() &lt; val) &#123;</span><br><span class="line">                    <span class="comment">//所要查找的节点在右边</span></span><br><span class="line">                    preNode = root;</span><br><span class="line">                    root = root.getRight();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//所要查找的节点在左边</span></span><br><span class="line">                    preNode = root;</span><br><span class="line">                    root = root.getLeft();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLeaf</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.getLeft() == <span class="literal">null</span> &amp;&amp; root.getRight() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isOneLeaf</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isLeaf(root) &amp;&amp; !isTwoLeaf(root)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isTwoLeaf</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.getLeft() != <span class="literal">null</span> &amp;&amp; root.getRight() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">            emptyPrintTree(root);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list.clear();</span><br><span class="line">            emptyPrintTree(root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">emptyPrintTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        list = inorderTraversal(root);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            inorderTraversal(root.getLeft());</span><br><span class="line">            list.add(root.getValue());</span><br><span class="line">            inorderTraversal(root.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果</p><p>delete 1<br>2 3 4 5 6 7 8 9 10 11 12 13 14 15<br>delete 2<br>3 4 5 6 7 8 9 10 11 12 13 14 15<br>delete 4<br>3 5 6 7 8 9 10 11 12 13 14 15 </p><p>这里写的时候，中间遇到了一些与树无关的一些问题，比如循环，return，还有采取static list必须要每次判断是否为empty，不然打印效果不好</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂谈</title>
      <link href="/2023/06/21/life1/"/>
      <url>/2023/06/21/life1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下最近生活吧</p><span id="more"></span><h1 id="近日总结"><a href="#近日总结" class="headerlink" title="近日总结"></a>近日总结</h1><h2 id="1-学习上"><a href="#1-学习上" class="headerlink" title="1.学习上"></a>1.学习上</h2><p>鸽了三四天没有再搞博客上的文章和装饰，直到今天下午才闲的一些功夫来写下博客，这两日是学校的期末周时间，我已经考完了高等数学和线性代数，还有大学物理，大学英语，Java 和离散数学没有考，只能说还是挺忙碌的，大学物理还在雾里（😭），但是我相信老师（👨‍🏫）的重点是真的考点，那我在端午就放心的去做那些题目了（虽然还是很多😮‍💨）</p><p>晒一张图书馆往外看的漫画云～☁️</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/IMG_6490.jpg" alt=""></p><h2 id="2-生活上"><a href="#2-生活上" class="headerlink" title="2.生活上"></a>2.生活上</h2><p>这两日下午一般都学的很晚，正是夕阳美景的时光🌇</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/IMG_6443.jpg" alt=""></p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/IMG_6491.jpg" alt=""></p><p>篝火民谣之夜依旧是氛围感十足😄</p><p><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/IMG_6465.jpg" alt=""></p><h2 id="浅浅的总结一下"><a href="#浅浅的总结一下" class="headerlink" title="浅浅的总结一下"></a>浅浅的总结一下</h2><p>这两日其实想说的没有很多，生活都是去体会的，哈哈，其实是我懒，我会更多的分享学习上的博客，但是生活是我们必不可少的永恒</p><p>bye～👋</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭个站的小心得</title>
      <link href="/2023/06/18/%E6%90%AD%E4%B8%AA%E7%AB%99%E7%9A%84%E5%B0%8F%E5%BF%83%E5%BE%97/"/>
      <url>/2023/06/18/%E6%90%AD%E4%B8%AA%E7%AB%99%E7%9A%84%E5%B0%8F%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下还没有完全建好但是大致能用的网站的建立心得体会</p><span id="more"></span><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li><a href="#1-为啥要建站">为啥要建站</a></li><li><a href="#2-建站的过程">建站的过程</a></li><li><a href="#3-遇到哪些问题">遇到哪些问题</a></li><li><a href="#4-写在最后">写在最后</a></li></ol><h2 id="1-为啥要建站？"><a href="#1-为啥要建站？" class="headerlink" title="1.为啥要建站？"></a>1.为啥要建站？</h2><ol><li>平时我自己有写一些记录的习惯，无论是生活还是学习，我觉得记录总是有意义的</li><li>在建站之前我本来是这样想的：自己学习 HTML，CSS，JavaScript，还有一些相关知识，<br>然后搭出一个属于自己的网站，并且把这个作为一个长期的目标，但是偶然间发现了这种现成的<br> 框架，发现是真的不错，就连着花了两天的时间搭出了一个雏形来</li><li>一个学习编程的人怎么能没有博客呢哈哈哈</li></ol><h2 id="2-建站的过程"><a href="#2-建站的过程" class="headerlink" title="2. 建站的过程"></a>2. 建站的过程</h2><ol><li><p>当时是先面向 CSDN 建站，大佬的教程很不错，跟着把一些环境都配置好了，但是没有用大佬的推荐的<br>butterfly 主题，用了volantis，也很不错！在这里鸣谢一下～.</p><p> —&gt;<a href="https://coder-jason.cn/2022/01/19/setup-personal-blog/">建站博客</a>.</p><p> —&gt;<a href="https://volantis.js.org">volantis</a></p></li><li>这两天其实一直沉迷于一些魔改，想把自己的网站做的很花，收藏了很多很多人的博客教程，以及一些 github 项目<br> 这里贴个图，就不一一感谢了，后面还会继续学习大佬们的博客文章！  <img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230614230952.png" alt=""><ol><li><strong>这里重点感谢一位大佬的博客，帮助我在原博客本地文件损坏的情况下用 butterfly 主题重建了博客，并且非常好看！！！</strong><br>这里贴大佬的网站 —&gt;<a href="https://www.fomal.cn">fomal</a><br><img src="https://c11njxxsblog.oss-cn-hangzhou.aliyuncs.com/20230616115401.png" alt=""><h2 id="3-遇到哪些问题"><a href="#3-遇到哪些问题" class="headerlink" title="3. 遇到哪些问题"></a>3. 遇到哪些问题</h2></li></ol></li><li>一个就是我没学过 HTML，CSS，js 的一些知识，对于里面的代码逻辑其实是不懂的，一切都是靠实际调试出来的</li><li>还有一个就是对于这个学习别人的建站教程，对应到自己这里还是有些细节上难以处理的问题，还得慢慢学习</li></ol><h2 id="4-写在最后"><a href="#4-写在最后" class="headerlink" title="4. 写在最后"></a>4. 写在最后</h2><p>这篇博文其实也是第一次比较正式的在自己的博客上写文章，也是比较符合我的一个心得记录.</p><p>感觉知识是没有尽头的，最近在学习很多新的知识，在不断的学习中才感到自己的渺小，希望这个博客能见证<br>我的一步步成长，我也会不定期的在这里发布我的学习生活心得，并且不断的完善和美化优化我的博客，<br>就这样吧～～～😄</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心得体会 </tag>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两道离散数学中的算法题</title>
      <link href="/2023/06/18/%E4%B8%A4%E9%81%93%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%E9%A2%98/"/>
      <url>/2023/06/18/%E4%B8%A4%E9%81%93%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下在学习离散数学的时候的两个实验，用 java 实现 warshall 算法来求传递闭包，用Kruskal 算法来求最小生成树</p><span id="more"></span><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p> <strong>1.Warshall 算法求传递闭包</strong><br><a href="#section1">1.实验过程中遇到的问题及其解决过程</a><br><a href="#section2">2.实现算法并编写一个程序求出给定关系的闭包</a><br><a href="#section3">3.实验结束时的程序清单及运行结果及实验总结</a></p><p><strong>2.Kruskal 算法求最小生成树</strong><br><a href="#section4">1.实验过程中遇到的问题及其解决过程</a><br><a href="#section5">2.利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树</a><br><a href="#section6">3.实验结束时的程序清单及运行结果及实验总结</a></p><hr><h2 id="1-Warshall-算法求传递闭包"><a href="#1-Warshall-算法求传递闭包" class="headerlink" title="1.Warshall 算法求传递闭包"></a>1.Warshall 算法求传递闭包</h2><p><a name="section1"></a></p><h3 id="1-实验过程遇到的问题及其解决过程"><a href="#1-实验过程遇到的问题及其解决过程" class="headerlink" title="1.实验过程遇到的问题及其解决过程"></a>1.实验过程遇到的问题及其解决过程</h3><p>如何设计算法，利用自然的逻辑进行，先循环每一行i，在检查第 i 列有哪些元素为 1，记录这些列号 j，把第 i 行的元素利用逻辑加法（我采用了三目运算）加到第 j 行，这里引入了第三层循环 ，并且每次运算都做了打印处理方便调试<br><a name="section2"></a></p><h3 id="2-实现算法并编写一个程序求出给定关系的闭包"><a href="#2-实现算法并编写一个程序求出给定关系的闭包" class="headerlink" title="2.实现算法并编写一个程序求出给定关系的闭包"></a>2.实现算法并编写一个程序求出给定关系的闭包</h3><p><strong>Warshall类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Warshall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化矩阵</span></span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                arr[i][j] = <span class="number">0</span>;<span class="comment">//先将所有元素设置为 0，再具体添加测试</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//warshall算法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环每一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//看第 i 列哪些元素为 1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j][i] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">//第 j 行 i 列的元素为 1</span></span><br><span class="line">                    <span class="comment">//把第 i 行的所有元素逻辑加到第 j 行</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>; s &lt; <span class="number">4</span>; s++) &#123;</span><br><span class="line">                        arr[j][s] = (arr[j][s] + arr[i][s]) == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;<span class="comment">//利用三目运算符</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">//每循环一行打印一次矩阵</span></span><br><span class="line">            System.out.println(<span class="string">&quot;\n----------第&quot;</span> + count + <span class="string">&quot;次-----------\n&quot;</span>);</span><br><span class="line">            printArr(arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[][] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] i : arr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">4</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(j + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="section3"></a></p><h3 id="3-实验结束的程序清单及运行结果及实验总结"><a href="#3-实验结束的程序清单及运行结果及实验总结" class="headerlink" title="3.实验结束的程序清单及运行结果及实验总结"></a>3.实验结束的程序清单及运行结果及实验总结</h3><p>0 1 0 0</p><p>0 0 1 1</p><p>1 1 0 0</p><p>1 0 0 0<br>—————第1次—————-</p><p>0 1 0 0</p><p>0 0 1 1</p><p>1 1 0 0</p><p>1 1 0 0<br>—————第2次—————-</p><p>0 1 1 1</p><p>0 0 1 1</p><p>1 1 1 1</p><p>1 1 1 1<br>—————第3次—————-</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1<br>—————第4次—————-</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1<br>Process finished with exit code 0<br>实验总结：<br>编写程序之前要理解 warshall 算法的步骤，才能清晰的写出程序运行逻辑</p><hr><h2 id="2-Kruskal-算法求最小生成树"><a href="#2-Kruskal-算法求最小生成树" class="headerlink" title="2.Kruskal 算法求最小生成树"></a>2.Kruskal 算法求最小生成树</h2><p><a name="section4"></a></p><h3 id="1-实验过程中遇到的问题及其解决过程"><a href="#1-实验过程中遇到的问题及其解决过程" class="headerlink" title="1.实验过程中遇到的问题及其解决过程"></a>1.实验过程中遇到的问题及其解决过程</h3><p>难点在于怎么样把图 G<V,E,C>设计成一些类的组合   </p><p>我在实现过程中，封装了 Graph 类表示图，Edge 表示边，并且把权重封装在 Edge 类中作为属性(为了方便权限设置为 public)，并且在 Graph 类中创建静态方法，实现打印点，边，按权重为边集合排序和初始化边集合的静态方法，直接在 main 方法中用 Edge 类调用，在 Kruskal 类中，我抽取了三个静态方法，实现 main 方法的简洁性，提高了代码的阅读性。   </p><p>第一个静态方法是设置点集合，可以在静态方法中自己调试点的个数，同理第二个静态方法是设置边集合，可以调试一些带权连通图，只需要把这些关系自己创建出对应的边即可，第三个静态方法是 Kruskal 算法的实现，我在里面利用一些计数器原理判断是否已经添加了（点数 -1）条边，并且利用 Graph 类封装的 isAdd 属性配合一个判断是否有回路的算法，来生成最小生成树的图newGraph</p><p> 中间遇到了一些问题通过断点调试 debug 解决了，主要是一些下标处理问题，在没有 isAdd 属性的时候，会有一些造成回路的边被重复判断，还有是引入了 count 防止跳过造成回路的边之后，i 的值作为下标赋值给新边的时候造成 ArrayIndexOutOfBounds 异常，暂且测试了两个例子，后面有时间会进行更多测试，并且支持自定义添加图，并判断是否为连通图再进行最小生成树的生成操作</p><p><a name="section5"></a></p><h3 id="2-利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树"><a href="#2-利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树" class="headerlink" title="2.利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树"></a>2.利用Java语言编写一个程序求出给定无向连通加权图的一棵最小生成树</h3><p><strong>Kruskal类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Kruskal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置点集合</span></span><br><span class="line">        <span class="type">int</span>[] points = setPoint();</span><br><span class="line">        <span class="comment">//设置边集合</span></span><br><span class="line">        Edge[] edges = setEdge();</span><br><span class="line">        <span class="comment">//Kruskal算法</span></span><br><span class="line">        kruskalMethod(points, edges);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">kruskalMethod</span><span class="params">(<span class="type">int</span>[] points, Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="comment">//Kruskal算法</span></span><br><span class="line">        <span class="comment">//按照权重从小到大的顺序添加边，已经排序好了直接按照边序号来</span></span><br><span class="line">        <span class="comment">//创建新图(只需要点的总数-1 条边）</span></span><br><span class="line">        Edge[] newEdge = <span class="keyword">new</span> <span class="title class_">Edge</span>[points.length - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//初始化新边集合</span></span><br><span class="line">        Graph.setEmptyEdge(newEdge);</span><br><span class="line">        <span class="type">Graph</span> <span class="variable">newGraph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(points, newEdge);</span><br><span class="line">        <span class="comment">//循环添加新边</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            <span class="comment">//设置第一,二条边</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || i == <span class="number">1</span>) &#123;</span><br><span class="line">                newGraph.edges[i].point1 = edges[i].point1;</span><br><span class="line">                newGraph.edges[i].point2 = edges[i].point2;</span><br><span class="line">                newGraph.edges[i].weight = edges[i].weight;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//当边数超过三时，需要判断是否形成回路，如果新生成的边的终点和前面已存在的边的起点重合，则判断为回路</span></span><br><span class="line">                <span class="keyword">if</span> (count == points.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;已添加完&quot;</span> + count + <span class="string">&quot;条边，不再继续添加(注意：本算法只列出了一种最小生成树！）&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//利用循环判断是否有回路</span></span><br><span class="line">                <span class="type">int</span> j;</span><br><span class="line">                <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    <span class="comment">//如果跳过了一条边，也相当于添加过了，就不要再重新比了，相当于做了一个标记，这条边我不要</span></span><br><span class="line">                    <span class="keyword">if</span> (edges[i].point2 == edges[j].point1 &amp;&amp; !edges[j].isAdd) &#123;</span><br><span class="line">                        edges[i].isAdd = <span class="literal">true</span>;</span><br><span class="line">                        System.out.println(<span class="string">&quot;有回路，跳过原第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot; 条边&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断上方是否正常跳出循环</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//break 跳出，说明有回路，更新 i 为下一条边</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//正常退出，正常添加新边,注意要用 count 来为新的边赋值，否则会随着一些边的跳过，导致 i 作为新边下标的越界问题</span></span><br><span class="line">                    newGraph.edges[count].point1 = edges[i].point1;</span><br><span class="line">                    newGraph.edges[count].point2 = edges[i].point2;</span><br><span class="line">                    newGraph.edges[count].weight = edges[i].weight;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看新边集合</span></span><br><span class="line">        Graph.printEdges(newGraph.edges);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] setPoint() &#123;</span><br><span class="line">        <span class="comment">//创建点集合</span></span><br><span class="line">        <span class="type">int</span>[] points = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//将点集合的值视为编号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            points[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印点集合</span></span><br><span class="line">        Graph.printPoints(points);</span><br><span class="line">        <span class="keyword">return</span> points;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Edge[] setEdge() &#123;</span><br><span class="line">        <span class="comment">//构造连通图</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1-2,5</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2-3,5</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3-5,6</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2-4,12</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 4-5,12</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2-5,15</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3-4,17</span></span><br><span class="line"><span class="comment">         //         */</span></span><br><span class="line"><span class="comment">//        Edge[] edges = new Edge[7];</span></span><br><span class="line"><span class="comment">//        edges[0] = new Edge(1, 2, 5);</span></span><br><span class="line"><span class="comment">//        edges[1] = new Edge(2, 3, 5);</span></span><br><span class="line"><span class="comment">//        edges[2] = new Edge(3, 5, 6);</span></span><br><span class="line"><span class="comment">//        edges[3] = new Edge(2, 4, 12);</span></span><br><span class="line"><span class="comment">//        edges[4] = new Edge(4, 5, 12);</span></span><br><span class="line"><span class="comment">//        edges[5] = new Edge(2, 5, 15);</span></span><br><span class="line"><span class="comment">//        edges[6] = new Edge(3, 4, 17);</span></span><br><span class="line">        Edge[] edges = <span class="keyword">new</span> <span class="title class_">Edge</span>[<span class="number">8</span>];</span><br><span class="line">        edges[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        edges[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">        edges[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">        edges[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        edges[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        edges[<span class="number">5</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">        edges[<span class="number">6</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        edges[<span class="number">7</span>] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//按权重排序</span></span><br><span class="line">        Graph.sortEdge(edges);</span><br><span class="line">        <span class="comment">//打印边集合</span></span><br><span class="line">        Graph.printEdges(edges);</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Graph类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] points;</span><br><span class="line">    <span class="keyword">public</span> Edge[] edges;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span>[] points, Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.points = points;</span><br><span class="line">        <span class="built_in">this</span>.edges = edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printPoints</span><span class="params">(<span class="type">int</span>[] points)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : points) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;点 &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printEdges</span><span class="params">(Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Edge e : edges) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span> + count + <span class="string">&quot;条边 : &quot;</span>);</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortEdge</span><span class="params">(Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="comment">//遍历权重</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; edges.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edges[j].weight &lt; edges[i].weight) &#123;</span><br><span class="line">                    <span class="type">Edge</span> <span class="variable">tmp</span> <span class="operator">=</span> edges[j];</span><br><span class="line">                    edges[j] = edges[i];</span><br><span class="line">                    edges[i] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setEmptyEdge</span><span class="params">(Edge[] edges)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            edges[i] = <span class="keyword">new</span> <span class="title class_">Edge</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Edge类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> point1;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> point2;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> isAdd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> point1, <span class="type">int</span> point2, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.point1 = point1;</span><br><span class="line">        <span class="built_in">this</span>.point2 = point2;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        isAdd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.point1 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.point2 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.weight = <span class="number">0</span>;</span><br><span class="line">        isAdd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;point1 : &quot;</span> + point1 + <span class="string">&quot; point2 : &quot;</span> + point2 + <span class="string">&quot; weight = &quot;</span> + weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="section6"></a></p><h3 id="3-实验结束时的程序清单及运行结果及实验总结"><a href="#3-实验结束时的程序清单及运行结果及实验总结" class="headerlink" title="3.实验结束时的程序清单及运行结果及实验总结"></a>3.实验结束时的程序清单及运行结果及实验总结</h3><p>点 1</p><p>点 2</p><p>点 3</p><p>点 4</p><p>点 5</p><p>第1条边 : point1 : 1 point2 : 2 weight = 1</p><p>第2条边 : point1 : 5 point2 : 2 weight = 1</p><p>第3条边 : point1 : 3 point2 : 4 weight = 2</p><p>第4条边 : point1 : 5 point2 : 1 weight = 2</p><p>第5条边 : point1 : 2 point2 : 3 weight = 2</p><p>第6条边 : point1 : 4 point2 : 2 weight = 2</p><p>第7条边 : point1 : 4 point2 : 5 weight = 3</p><p>第8条边 : point1 : 1 point2 : 4 weight = 3</p><p>有回路，跳过原第4 条边</p><p>有回路，跳过原第5 条边</p><p>已添加完4条边，不再继续添加(注意：本算法只列出了一种最小生成树！）</p><p>第1条边 : point1 : 1 point2 : 2 weight = 1</p><p>第2条边 : point1 : 5 point2 : 2 weight = 1</p><p>第3条边 : point1 : 3 point2 : 4 weight = 2</p><p>第4条边 : point1 : 4 point2 : 2 weight = 2</p><p>Process finished with exit code 0</p><p>总结的话在（1）里面已经总结了</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
